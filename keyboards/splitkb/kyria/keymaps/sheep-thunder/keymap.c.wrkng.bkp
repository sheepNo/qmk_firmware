/* Copyright 2019 Thomas Baart <thomas@splitkb.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H

enum layers {
    _BASE = 0,
    _MOVE = 1,
    _NUM = 2,
    _SETTINGS = 3,
};


// Aliases for readability
#define CTL_ESC  LCTL_T(KC_ESC)
#define MOVE_TAB LT(_MOVE, KC_TAB)
// The notation `mod/tap` denotes a key that activates the modifier `mod` when held down, and
// produces the key `tap` when tapped (i.e. pressed and released).

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
/*
 * Base Layer: BASE
 *
 * ,-------------------------------------------.                              ,-----------------------------------------.
 * |MOVE/Tab|   B  |   É  |   P  |   O  |   È  |                              |   ^  |   V  |   D  |   L  |   J  |   Z  |
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+------|
 * |Ctrl/Esc|   A  |   U  |   I  |   E  |   ;  |                              |   C  |   T  |   S  |   R  |   N  |   M  |
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+------|
 * |    Ç   |   À  |   Y  |   X  |   :  |   K  |      | RGB  |  | SETNG|      |   ?  |   Q  |   G  |   H  |   F  |   W  |
 * `----------------------+------+------+------+ Space+------|  |------+ Enter+------+------+------+--------------------'
 *                        | MUTE | SUPER| ALT  |      | NUM  |  | MOVE |      | SHIFT|  ALT | TODO |
 *                        |      |      |      |      |(NUM) |  |(MOVE)|      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_BASE] = LAYOUT(
     MOVE_TAB, KC_Q ,  KC_W   ,  KC_E  ,   KC_R ,   KC_T ,                                           KC_Y,   KC_U,    KC_I,   KC_O,   KC_P, KC_LBRC,
     CTL_ESC , KC_A ,  KC_S   ,  KC_D  ,   KC_F ,   KC_G ,                                           KC_H,   KC_J,    KC_K,   KC_L,KC_SCLN, KC_QUOT,
     KC_BSLS , KC_Z ,  KC_X   ,  KC_C  ,   KC_V ,   KC_B , KC_SPC, RGB_TOG,  TG(_SETTINGS), KC_ENT,  KC_N,   KC_M, KC_COMM, KC_DOT,KC_SLSH, KC_RBRC,
                                KC_MUTE, KC_LGUI, KC_LALT, KC_SPC,TT(_NUM),  TT(_MOVE)   , KC_ENT,KC_RSFT,KC_RALT, RGB_TOG
    ),

/*
 * Navigation Layer: MOVE
 *
 * ,-------------------------------------------.                              ,-------------------------------------------.
 * |        |      |      | PrtSc|      |      |                              | PgUp | Home |   ↑  | End  | BkSpc| Insert |
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
 * |        | SUPER|  ALT | SHIFT| CTRL |CAPSLK|                              | PgDn |  ←   |   ↓  |   →  |  Del |        |
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
 * |        |      |      |      |      |      |      |      |  |      |      |      |      |      |      |      |        |
 * `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_MOVE] = LAYOUT(
      _______, _______, _______, KC_PSCR, _______, _______,                                     KC_PGUP, KC_HOME,   KC_UP,  KC_END, KC_BSPC, KC_INS,
      _______, KC_LGUI, KC_LALT, KC_LSFT, KC_LCTL, KC_CAPS,                                     KC_PGDN, KC_LEFT, KC_DOWN, KC_RGHT, KC_DEL ,_______,
      _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,_______,
                                 _______, _______, _______, _______, _______, _______, _______, _______, _______, _______
    ),

/*
 * Numbers Layer: NUM
 *
 * ,-------------------------------------------.                              ,-------------------------------------------.
 * |        |      |      |      |      |      |                              |   %  |      |      |      |      |        |  <--.
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|     |  test inversion
 * |    $   |   "  |  «   |  »   |  (   |  )   |                              |   @  |   +  |  -   |  /   |  *   |   =    |  <--'
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
 * |  F12   |  F1  |  F2  |  F3  |  F4  |  F5  |      |      |  |      |      |  F6  |  F7  |  F8  |  F9  |  F10 |  F11   |
 * `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_NUM] = LAYOUT(
      KC_GRV ,   KC_1 ,   KC_2 ,   KC_3 ,   KC_4 ,   KC_5 ,                                        KC_6,   KC_7 ,   KC_8 ,   KC_9 ,   KC_0 , KC_EQL ,
      _______, _______, _______, _______, _______, _______,                                     KC_MINS, _______, _______, _______, _______, _______,
      KC_F12 ,  KC_F1 ,  KC_F2 ,  KC_F3 ,  KC_F4 ,  KC_F5 , _______, _______, _______, _______,  KC_F6 ,  KC_F7 ,  KC_F8 ,  KC_F9 , KC_F10 , KC_F11 ,
                                 _______, _______, _______, _______, _______, _______, _______, _______, _______, _______
    ),

/*
 * Settings Layer: SETTINGS
 *
 * ,-------------------------------------------.                              ,-------------------------------------------.
 * |        |      |      |      |      |      |                              |      |      |      |      |      |        |
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
 * |        |      |      |      |      |      |                              |      |      |      |      |      |        |
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
 * |        |      |      |      |      |      |      |      |  |      |      |      |      |      |      |      |        |
 * `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_SETTINGS] = LAYOUT(
      _______, RGB_M_P, RGB_M_B, RGB_M_R,RGB_M_SW,RGB_M_SN,                                     _______, _______, _______, _______, _______, _______,
      _______, RGB_M_K, RGB_M_X, RGB_M_G, RGB_M_T,RGB_M_TW,                                     _______, _______, _______, _______, _______, _______,
      _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
                                 _______, _______, _______, _______, _______, _______, _______, _______, _______, RGB_TOG
    ),
};

/* The default OLED and rotary encoder code can be found at the bottom of qmk_firmware/keyboards/splitkb/kyria/rev1/rev1.c
 * These default settings can be overriden by your own settings in your keymap.c
 * For your convenience, here's a copy of those settings so that you can uncomment them if you wish to apply your own modifications.
 * DO NOT edit the rev1.c file; instead override the weakly defined default functions by your own.
 */

#ifdef OLED_ENABLE
#define ANIM_FRAME_DURATION 55  // how long each frame lasts in ms
#define IDLE_FRAMES 6
#define IDLE_SPEED 5
#define TAP_SPEED 60
#define TAP_FRAMES 11
#define TOTAL_TAP_CHUNKS_RIGHT 78
#define TOTAL_TAP_CHUNKS_LEFT 68
#define RIGHT 0
#define LEFT 1

uint8_t current_tap_frame = 0;
uint8_t current_tap_frame_idx[2] = {0,0};
uint32_t anim_timer = 0;
uint32_t anim_sleep = 0;
bool looping_animation = false;
bool finish_thunder_animation = false;
uint8_t side = RIGHT;

static const uint8_t total_tap_chunks[] = {
    TOTAL_TAP_CHUNKS_RIGHT,
    TOTAL_TAP_CHUNKS_LEFT
};

// clang-format off

static const uint8_t nb_of_chunks[2][TAP_FRAMES] = {
    // right
    {
        2,  //0
        2,  //1
        4,  //2
        6,  //3
        8,  //4
        6,  //5
        16, //6
        16, //7
        8,  //8
        8,  //9
        2   //10
    },
        // left
    {
        1,  //0
        4,  //1
        7,  //2
        7,  //3
        5,  //4
        3,  //5
        15, //6
        12, //7
        8,  //8
        5,  //9
        1,  //10
    }
};

// PROGMEM non utilisable pour ça
static const uint8_t chunk_position[2][TOTAL_TAP_CHUNKS_RIGHT][2] = {
    // right
    {
        {18,1},{18,2}, //0
        {18,0},{18,1}, //1
        {17,2}, {18,1}, {17,3}, {18,2}, //2
        {16,2}, {18,1}, {18,2}, {16,3}, {18,2}, {18,3}, //3
        {14,1}, {14,3}, {18,1}, {18,3}, {14,2}, {14,4}, {18,2}, {18,4}, //4
        {14,1}, {14,3}, {18,3}, {14,2}, {14,4}, {18,4},//5 
        {0,1}, {2,2}, {4,3}, {8,3}, {12,3}, {14,2}, {16,3}, {18,2}, {0,2}, {2,3}, {4,4}, {8,4}, {12,4}, {14,3}, {16,4}, {18,3},//6
        {0,2}, {0,3}, {4,2}, {6,1}, {10,1}, {14,1}, {18,1}, {18,3}, {0,3}, {0,4}, {4,3}, {6,2}, {10,2}, {14,2}, {18,2}, {18,4}, //7
        {0,1}, {4,1}, {10,4}, {14,5}, {0,2}, {4,2}, {10,5}, {14,6}, //8
        {0,0}, {4,0}, {12,6}, {16,6}, {0,1}, {4,1}, {12,7}, {16,7}, //9
        {14,6}, {14,7} //10
    },
        // left
    {
        {0,6}, //0
        {0,4}, {0,5}, {0,6}, {0,7}, //1
        {0,3}, {0,7}, {3,6}, {4,3}, {4,4}, {4,5}, {4,7}, //2
        {0,3}, {0,7}, {3,2}, {3,6}, {7,3}, {7,4}, {7,5}, //3
        {0,3}, {0,7}, {4,2}, {7,5}, {8,3}, // 4
        {5,2}, {7,5}, {9,3}, //5
        {0,1}, {0,2}, {0,3}, {2,4}, {4,3}, {6,2}, {6,4}, {8,3}, {10,2}, {12,3}, {14,1}, {14,2}, {18,0}, {18,1}, {18,2}, //6
        {0,2}, {0,3}, {4,1}, {4,2}, {8,1}, {8,2}, {10,3}, {12,2}, {14,3}, {14,4}, {18,3}, {18,4}, //7
        {0,3}, {0,4}, {1,5}, {4,4}, {5,5}, {8,4}, {10,3}, {18,2}, //8
        {2,5}, {3,6}, {6,5}, {11,3}, {11,4}, //9
        {0,6} //10
    }
};

static const char PROGMEM thunder[2][TOTAL_TAP_CHUNKS_RIGHT][24] = {
    // right
    {
        /*0*/
        // 'thunder_top_right-0', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-0', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

        /*1*/
        // 'thunder_top_right-1', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-1', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0x14, 0x12, 0x12, 0x11, 0x10, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00}, 

        /*2*/
        // 'thunder_top_right-2', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-3', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x1c, 0x0f, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-2', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01}, 
        // 'thunder_bot_right-3', 24x8px
        {0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00}, 

        /*3*/
        // 'thunder_top_right-4', 24x8px
        {0x00, 0x00, 0x00, 0x80, 0x60, 0x10, 0x08, 0x04, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-5', 24x8px
        {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x08, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-6', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-4', 24x8px
        {0x00, 0x00, 0x0c, 0x13, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20}, 
        // 'thunder_bot_right-5', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-6', 24x8px
        {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00}, 
        
        /*4*/
        // 'thunder_top_right-7', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x20, 0x20}, 
        // 'thunder_top_right-8', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x20, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-9', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-10', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-7', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-8', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-9', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-10', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

        /*5*/
        // 'thunder_top_right-11', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-12', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-13', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-11', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-12', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-13', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        /*6*/
        // 'thunder_top_right-14', 24x8px
        {0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-15', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-16', 24x8px
        {0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80}, 
        // 'thunder_top_right-17', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0}, 
        // 'thunder_top_right-18', 24x8px
        {0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff}, 
        // 'thunder_top_right-19', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0}, 
        // 'thunder_top_right-20', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, 
        // 'thunder_top_right-21', 24x8px
        {0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-14', 24x8px
        {0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8}, 
        // 'thunder_bot_right-15', 24x8px
        {0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe}, 
        // 'thunder_bot_right-16', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x7f}, 
        // 'thunder_bot_right-17', 24x8px
        {0x7f, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0x7c, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f}, 
        // 'thunder_bot_right-18', 24x8px
        {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07}, 
        // 'thunder_bot_right-19', 24x8px
        {0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, 
        // 'thunder_bot_right-20', 24x8px
        {0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-21', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00}, 
        
        /*7*/
        // 'thunder_top_right-22', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0}, 
        // 'thunder_top_right-23', 24x8px
        {0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f}, 
        // 'thunder_top_right-24', 24x8px
        {0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe}, 
        // 'thunder_top_right-25', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80}, 
        // 'thunder_top_right-26', 24x8px
        {0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8}, 
        // 'thunder_top_right-27', 24x8px
        {0xf8, 0xf8, 0xfc, 0xfc, 0x7c, 0x7c, 0x7c, 0x7c, 0x3e, 0x3e, 0x3e, 0x3e, 0x1e, 0x1e, 0x1f, 0x1f, 0x3f, 0x7f, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8}, 
        // 'thunder_top_right-28', 24x8px
        {0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-29', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-22', 24x8px
        {0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f}, 
        // 'thunder_bot_right-23', 24x8px
        {0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-24', 24x8px
        {0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, 
        // 'thunder_bot_right-25', 24x8px
        {0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f}, 
        // 'thunder_bot_right-26', 24x8px
        {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, 
        // 'thunder_bot_right-27', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x0f}, 
        // 'thunder_bot_right-28', 24x8px
        {0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-29', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0x00, 0x00, 0x00, 0x00}, 
        
        /*8*/
        // 'thunder_top_right-30', 24x8px
        {0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0x70, 0x70, 0x78, 0x78, 0x38, 0x38, 0x78, 0x78, 0xf0, 0xf0, 0xe0, 0xe0}, 
        // 'thunder_top_right-31', 24x8px
        {0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-32', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-33', 24x8px
        {0xf0, 0xf0, 0xe0, 0xe0, 0xf0, 0xf0, 0x70, 0x70, 0x38, 0x38, 0x38, 0x38, 0x1c, 0x1c, 0x0c, 0x0c, 0x04, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-30', 24x8px
        {0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01}, 
        // 'thunder_bot_right-31', 24x8px
        {0x03, 0x03, 0x06, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-32', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x06, 0x0e, 0x0e, 0x1c, 0x1c, 0x3c, 0x3c, 0x78, 0x78, 0x78, 0x78, 0xf0, 0xf0}, 
        // 'thunder_bot_right-33', 24x8px
        {0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        /*9*/
        // 'thunder_top_right-34', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-35', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-36', 24x8px
        {0x00, 0x00, 0x00, 0x02, 0x02, 0x06, 0x04, 0x0c, 0x0c, 0x18, 0x18, 0x18, 0x38, 0x30, 0x30, 0x70, 0x60, 0xe0, 0xe0, 0xf0, 0x70, 0x70, 0x38, 0x38}, 
        // 'thunder_top_right-37', 24x8px
        {0x18, 0x1c, 0x0c, 0x0e, 0x06, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-34', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x10, 0x18, 0x0c, 0x0c, 0x06, 0x06, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x06, 0x0c}, 
        // 'thunder_bot_right-35', 24x8px
        {0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-36', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-37', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        /*10*/
        // 'thunder_top_right-38', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        // 'thunder_bot_right-38', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x18, 0x1c, 0x0e, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
    },
    // left
    {
        // 'thunder_left-0', 24x8px
        {0xff, 0xff, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-1', 24x8px
        {0x07, 0x06, 0x08, 0x08, 0x10, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-2', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10, 0x90, 0x90, 0x50, 0x50, 0x20, 0x20, 0x00, 0x00}, 
        // 'thunder_left-3', 24x8px
        {0xc0, 0xc0, 0x60, 0x20, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-4', 24x8px
        {0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-5', 24x8px
        {0xc0, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}, 
        // 'thunder_left-6', 24x8px
        {0x06, 0x06, 0x06, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02}, 
        // 'thunder_left-7', 24x8px
        {0x00, 0x00, 0x00, 0x18, 0x24, 0x44, 0x82, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-8', 24x8px
        {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x20, 0xc0, 0x00, 0x00}, 
        // 'thunder_left-9', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x18, 0x07, 0x00, 0x00}, 
        // 'thunder_left-10', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-11', 24x8px
        {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-12', 24x8px
        {0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-13', 24x8px
        {0x06, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, 
        // 'thunder_left-14', 24x8px
        {0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-15', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-16', 24x8px
        {0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-17', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-18', 24x8px
        {0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-19', 24x8px
        {0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-20', 24x8px
        {0x00, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-21', 24x8px
        {0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-22', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-23', 24x8px
        {0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-24', 24x8px
        {0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-25', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-26', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-27', 24x8px
        {0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-28', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-29', 24x8px
        {0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8}, 
        // 'thunder_left-30', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f}, 
        // 'thunder_left-31', 24x8px
        {0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8}, 
        // 'thunder_left-32', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80}, 
        // 'thunder_left-33', 24x8px
        {0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-34', 24x8px
        {0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07}, 
        // 'thunder_left-35', 24x8px
        {0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x7f}, 
        // 'thunder_left-36', 24x8px
        {0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-37', 24x8px
        {0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff}, 
        // 'thunder_left-38', 24x8px
        {0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00}, 
        // 'thunder_left-39', 24x8px
        {0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-40', 24x8px
        {0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-41', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-42', 24x8px
        {0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc}, 
        // 'thunder_left-43', 24x8px
        {0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01}, 
        // 'thunder_left-44', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0}, 
        // 'thunder_left-45', 24x8px
        {0xfc, 0xfc, 0xfe, 0xfe, 0x7e, 0x7e, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01}, 
        // 'thunder_left-46', 24x8px
        {0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0x7c, 0x7c, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00}, 
        // 'thunder_left-47', 24x8px
        {0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f}, 
        // 'thunder_left-48', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f}, 
        // 'thunder_left-49', 24x8px
        {0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-50', 24x8px
        {0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0}, 
        // 'thunder_left-51', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, 
        // 'thunder_left-52', 24x8px
        {0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-53', 24x8px
        {0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-54', 24x8px
        {0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-55', 24x8px
        {0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7e, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0}, 
        // 'thunder_left-56', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3e, 0x3e}, 
        // 'thunder_left-57', 24x8px
        {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0}, 
        // 'thunder_left-58', 24x8px
        {0x7e, 0x7e, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00}, 
        // 'thunder_left-59', 24x8px
        {0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0x7c, 0x7c, 0x3c, 0x3c, 0x3e, 0x1e, 0x1e, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01}, 
        // 'thunder_left-60', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0x60, 0x70, 0x70, 0x30, 0x30, 0x18, 0x08, 0x08, 0x00, 0x00}, 
        // 'thunder_left-61', 24x8px
        {0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x18, 0x18, 0x08, 0x08, 0x0c, 0x0c, 0x04, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-62', 24x8px
        {0x0c, 0x0c, 0x38, 0x38, 0x78, 0x78, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0}, 
        // 'thunder_left-63', 24x8px
        {0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-64', 24x8px
        {0xe0, 0xe0, 0x60, 0x60, 0x30, 0x30, 0x30, 0x30, 0x18, 0x18, 0x18, 0x18, 0x0c, 0x0c, 0x04, 0x04, 0x06, 0x06, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00}, 
        // 'thunder_left-65', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-66', 24x8px
        {0x00, 0x00, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x06, 0x06, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-67', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x06, 0x06, 0x0e, 0x0c, 0x1c, 0x1c, 0x18, 0x18, 0x30, 0x30, 0x30, 0x20, 0x60, 0x40}
    }
};

// clang-format on

oled_rotation_t oled_init_user(oled_rotation_t rotation) { return OLED_ROTATION_180; }

static void render_thunder(void) { 
    oled_clear();

    if (get_current_wpm() >= IDLE_SPEED) {
        // render the frame depending on WPM
        if (current_tap_frame < IDLE_FRAMES) {
            // always render the first few frames
            for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_tap_frame]; chunk_sub_idx++) {
                oled_set_cursor(chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][0], chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][1]);
                oled_write_raw_P(thunder[side][current_tap_frame_idx[side]+chunk_sub_idx], sizeof(thunder[side][0]));
            }
            finish_thunder_animation = false;
        } else if ((get_current_wpm() >= TAP_SPEED) || (finish_thunder_animation)) {
            for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_tap_frame]; chunk_sub_idx++) {
                oled_set_cursor(chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][0], chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][1]);
                oled_write_raw_P(thunder[side][current_tap_frame_idx[side]+chunk_sub_idx], sizeof(thunder[side][0]));
            }
            // we need to finish rendering the rest of the thunder
            finish_thunder_animation = true;
        }
        // keep incrementing the counter
        current_tap_frame_idx[side] = (current_tap_frame_idx[side] + nb_of_chunks[side][current_tap_frame]) % total_tap_chunks[side];
        current_tap_frame = (current_tap_frame + 1) % TAP_FRAMES;
        // start or keep looping
        looping_animation = true;
    } else {
        if (looping_animation) {
            if (current_tap_frame == 0) {
                // we are done looping 
                looping_animation = false;
                finish_thunder_animation = false;
            } else if (current_tap_frame < IDLE_FRAMES) {
                // display the remaining frames for idle
                for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_tap_frame]; chunk_sub_idx++) {
                    oled_set_cursor(chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][0], chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][1]);
                    oled_write_raw_P(thunder[side][current_tap_frame_idx[side]+chunk_sub_idx], sizeof(thunder[side][0]));
                }
            } else if (finish_thunder_animation) {
                // display the remaining frames for thunder
                for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_tap_frame]; chunk_sub_idx++) {
                    oled_set_cursor(chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][0], chunk_position[side][current_tap_frame_idx[side]+chunk_sub_idx][1]);
                    oled_write_raw_P(thunder[side][current_tap_frame_idx[side]+chunk_sub_idx], sizeof(thunder[side][0]));
                }
            }
            // keep incrementing the counter
            current_tap_frame_idx[side] = (current_tap_frame_idx[side] + nb_of_chunks[side][current_tap_frame]) % total_tap_chunks[side];
            current_tap_frame = (current_tap_frame + 1) % TAP_FRAMES;
        }
    }
    // nothing to display if not (above IDLE_SPEED or currently looping)
}

bool oled_task_user(void) {
    if (sync_timer_elapsed32(anim_timer) > ANIM_FRAME_DURATION) {
        // it is time to render a frame
        anim_timer = sync_timer_read32();
        if (is_keyboard_left()) {
            // passé en argument ça casse tout ??
            // si je passe un argument l'éclair ne se fait que rarement
            side = LEFT;
            render_thunder();
        } else {
            side = RIGHT;
            render_thunder();
        }
    }
    return false;
}
#endif // OLED_ENABLE

#ifdef ENCODER_ENABLE
bool encoder_update_user(uint8_t index, bool clockwise) {
    if (index == 0) {
        // Volume or hue control
        if (clockwise) {
            switch (get_highest_layer(layer_state)) {
                #ifdef RGBLIGHT_ENABLE
                case _SETTINGS:
                    rgblight_decrease_hue_noeeprom();
                    break;
                #endif
                default:
                  tap_code(KC_VOLD);
            }
        } else {
            switch (get_highest_layer(layer_state)) {
                #ifdef RGBLIGHT_ENABLE
                case _SETTINGS:
                    rgblight_increase_hue_noeeprom();
                    break;
                #endif
                default:
                  tap_code(KC_VOLU);
            }
        }
    } else if (index == 1) {
        // Page up/Page down or RGB Brightness
        if (clockwise) {
            tap_code(KC_PGUP);
        } else {
            switch (get_highest_layer(layer_state)) {
                #ifdef RGBLIGHT_ENABLE
                case _SETTINGS:
                    rgblight_increase_val_noeeprom();
                    break;
                #endif
                default:
                  tap_code(KC_PGUP);
            }
        }
    }
    return false;
}
#endif // ENCODER_ENABLE