/* Copyright 2019 Thomas Baart <thomas@splitkb.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H
#include <stdlib.h>

enum layers {
    _BASE = 0,
    _MOVE = 1,
    _NUM = 2,
    _SETTINGS = 3,
};


// Aliases for readability
#define CTL_ESC  LCTL_T(KC_ESC)
#define MOVE_TAB LT(_MOVE, KC_TAB)
// The notation `mod/tap` denotes a key that activates the modifier `mod` when held down, and
// produces the key `tap` when tapped (i.e. pressed and released).

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
/*
 * Base Layer: BASE
 *
 * ,-------------------------------------------.                              ,-----------------------------------------.
 * |MOVE/Tab|   B  |   É  |   P  |   O  |   È  |                              |   ^  |   V  |   D  |   L  |   J  |   Z  |
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+------|
 * |Ctrl/Esc|   A  |   U  |   I  |   E  |   ;  |                              |   C  |   T  |   S  |   R  |   N  |   M  |
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+------|
 * |    Ç   |   À  |   Y  |   X  |   :  |   K  |      | RGB  |  | SETNG|      |   ?  |   Q  |   G  |   H  |   F  |   W  |
 * `----------------------+------+------+------+ Space+------|  |------+ Enter+------+------+------+--------------------'
 *                        | MUTE | SUPER| ALT  |      | NUM  |  | MOVE |      | SHIFT|  ALT | TODO |
 *                        |      |      |      |      |(NUM) |  |(MOVE)|      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_BASE] = LAYOUT(
     MOVE_TAB, KC_Q ,  KC_W   ,  KC_E  ,   KC_R ,   KC_T ,                                           KC_Y,   KC_U,    KC_I,   KC_O,   KC_P, KC_LBRC,
     CTL_ESC , KC_A ,  KC_S   ,  KC_D  ,   KC_F ,   KC_G ,                                           KC_H,   KC_J,    KC_K,   KC_L,KC_SCLN, KC_QUOT,
     KC_BSLS , KC_Z ,  KC_X   ,  KC_C  ,   KC_V ,   KC_B , KC_SPC, RGB_TOG,  TG(_SETTINGS), KC_ENT,  KC_N,   KC_M, KC_COMM, KC_DOT,KC_SLSH, KC_RBRC,
                                KC_MUTE, KC_LGUI, KC_LALT, KC_SPC,TT(_NUM),  TT(_MOVE)   , KC_ENT,KC_RSFT,KC_RALT, RGB_TOG
    ),

/*
 * Navigation Layer: MOVE
 *
 * ,-------------------------------------------.                              ,-------------------------------------------.
 * |        |      |      | PrtSc|      |      |                              | PgUp | Home |   ↑  | End  | BkSpc| Insert |
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
 * |        | SUPER|  ALT | SHIFT| CTRL |CAPSLK|                              | PgDn |  ←   |   ↓  |   →  |  Del |        |
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
 * |        |      |      |      |      |      |      |      |  |      |      |      |      |      |      |      |        |
 * `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_MOVE] = LAYOUT(
      _______, _______, _______, KC_PSCR, _______, _______,                                     KC_PGUP, KC_HOME,   KC_UP,  KC_END, KC_BSPC, KC_INS,
      _______, KC_LGUI, KC_LALT, KC_LSFT, KC_LCTL, KC_CAPS,                                     KC_PGDN, KC_LEFT, KC_DOWN, KC_RGHT, KC_DEL ,_______,
      _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,_______,
                                 _______, _______, _______, _______, _______, _______, _______, _______, _______, _______
    ),

/*
 * Numbers Layer: NUM
 *
 * ,-------------------------------------------.                              ,-------------------------------------------.
 * |        |      |      |      |      |      |                              |   %  |      |      |      |      |        |  <--.
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|     |  test inversion
 * |    $   |   "  |  «   |  »   |  (   |  )   |                              |   @  |   +  |  -   |  /   |  *   |   =    |  <--'
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
 * |  F12   |  F1  |  F2  |  F3  |  F4  |  F5  |      |      |  |      |      |  F6  |  F7  |  F8  |  F9  |  F10 |  F11   |
 * `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_NUM] = LAYOUT(
      KC_GRV ,   KC_1 ,   KC_2 ,   KC_3 ,   KC_4 ,   KC_5 ,                                        KC_6,   KC_7 ,   KC_8 ,   KC_9 ,   KC_0 , KC_EQL ,
      _______, _______, _______, _______, _______, _______,                                     KC_MINS, _______, _______, _______, _______, _______,
      KC_F12 ,  KC_F1 ,  KC_F2 ,  KC_F3 ,  KC_F4 ,  KC_F5 , _______, _______, _______, _______,  KC_F6 ,  KC_F7 ,  KC_F8 ,  KC_F9 , KC_F10 , KC_F11 ,
                                 _______, _______, _______, _______, _______, _______, _______, _______, _______, _______
    ),

/*
 * Settings Layer: SETTINGS
 *
 * ,-------------------------------------------.                              ,-------------------------------------------.
 * |        |      |      |      |      |      |                              |      |      |      |      |      |        |
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
 * |        |      |      |      |      |      |                              |      |      |      |      |      |        |
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
 * |        |      |      |      |      |      |      |      |  |      |      |      |      |      |      |      |        |
 * `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        |      |      |      |      |      |  |      |      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */
    [_SETTINGS] = LAYOUT(
      _______, RGB_M_P, RGB_M_B, RGB_M_R,RGB_M_SW,RGB_M_SN,                                     _______, _______, _______, _______, _______, _______,
      _______, RGB_M_K, RGB_M_X, RGB_M_G, RGB_M_T,RGB_M_TW,                                     _______, _______, _______, _______, _______, _______,
      _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
                                 _______, _______, _______, _______, _______, _______, _______, _______, _______, RGB_TOG
    ),
};

/* The default OLED and rotary encoder code can be found at the bottom of qmk_firmware/keyboards/splitkb/kyria/rev1/rev1.c
 * These default settings can be overriden by your own settings in your keymap.c
 * For your convenience, here's a copy of those settings so that you can uncomment them if you wish to apply your own modifications.
 * DO NOT edit the rev1.c file; instead override the weakly defined default functions by your own.
 */

#ifdef OLED_ENABLE
#define ANIM_FRAME_DURATION 250  // how long each frame lasts in ms
#define IDLE_FRAMES 2
#define IDLE_FRAMES_BIRDS 18
#define IDLE_SPEED 20 
#define PREP_FRAMES 2
#define TAP_FRAMES 5
#define TAP_SPEED 50

// RGB related vars
enum RGBLIGHT_EFFECT_MODE rgb_mode;
char str_rgb_mode[3+1];
uint8_t rgb_val;
char str_rgb_val[3+1]; // %03d + '\0' added by itoa
uint8_t rgb_hue;
char str_rgb_hue[3+1];
uint8_t wpm_val;
char str_wpm_val[3+1];

// Animation related vars
uint32_t anim_timer = 0;
uint32_t anim_sleep = 0;
uint8_t current_idle_frame_rand = 0;
uint8_t current_idle_frame_birds = 0;
uint8_t current_prep_frame = 0;
uint8_t current_tap_frame = 0;
bool looping_animation = false;

// clang-format off
// 'frame_wide_info_wo_birds', 128x64px
static const char PROGMEM frame_wide_info[] = {
  0x3c, 0x42, 0x81, 0x81, 0x85, 0x8d, 0x42, 0x3c, 0x82, 0x4d, 0x39, 0x35, 0x66, 0x66, 0x6d, 0x69, 
  0x71, 0x39, 0x1d, 0x4d, 0x85, 0xc5, 0xe1, 0x73, 0x27, 0x1c, 0x38, 0x76, 0x67, 0x63, 0x61, 0x63, 
  0x70, 0x39, 0x19, 0x4d, 0x8d, 0x8d, 0xdd, 0x75, 0xc5, 0xa5, 0x65, 0x25, 0x45, 0x25, 0x25, 0x25, 
  0x25, 0x25, 0x25, 0x25, 0xc5, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0f, 0xf9, 0x09, 0xff, 
  0xfe, 0x01, 0x1c, 0x7e, 0xe3, 0xc1, 0x83, 0x06, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb8, 0xe4, 0x8a, 0x21, 0x08, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0xfe, 0xff, 
  0x60, 0x30, 0x78, 0xee, 0xc7, 0x00, 0x80, 0xc0, 0xe0, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x80, 0xc0, 
  0xe0, 0x80, 0x40, 0xe0, 0xc0, 0x00, 0x40, 0xe6, 0xf3, 0x00, 0x90, 0xc8, 0x2c, 0x2c, 0xfc, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 
  0x0f, 0x9f, 0xd8, 0x70, 0x70, 0xbf, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
  0xd7, 0x89, 0x00, 0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0xba, 0x72, 0xa0, 0x38, 0xd8, 
  0x48, 0x90, 0x28, 0x86, 0x00, 0xfe, 0x82, 0xba, 0xba, 0xba, 0x83, 0xff, 0x01, 0x41, 0x41, 0x42, 
  0xc2, 0x84, 0xf8, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0x07, 
  0x02, 0x00, 0x00, 0x07, 0x07, 0x02, 0x60, 0xcf, 0x9f, 0x88, 0x44, 0x3f, 0x1f, 0x00, 0x00, 0x1f, 
  0x1f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x04, 0x01, 0x03, 0x02, 0x02, 0x03, 0x03, 
  0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x8a, 0x0c, 0x10, 0xef, 0x80, 0x7f, 
  0xfe, 0x01, 0x3c, 0x70, 0xe1, 0xc3, 0x97, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x10, 0x0c, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 
  0x02, 0x02, 0x00, 0x02, 0x9a, 0x3a, 0x9a, 0x5c, 0x60, 0xaa, 0x9c, 0x42, 0x65, 0x40, 0x19, 0x6a, 
  0xb8, 0x96, 0x70, 0xd7, 0xb2, 0x78, 0x7c, 0xfa, 0x12, 0xb2, 0xa4, 0x62, 0x00, 0x00, 0x00, 0x01, 
  0x00, 0x00, 0x00, 0x0c, 0x13, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x7c, 0x08, 0x04, 0x0c, 0x00, 0x38, 0x54, 0x4c, 0x20, 0x08, 0x3c, 0x40, 0x38, 0x04, 
  0x40, 0x00, 0x06, 0xcb, 0xa3, 0x9b, 0xc6, 0xc0, 0x00, 0x80, 0x04, 0x86, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x28, 0xf3, 0xf8, 0x0c, 0x26, 0x73, 0xf1, 0xee, 
  0x7d, 0x83, 0xc6, 0x64, 0x30, 0x1f, 0x4f, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x32, 0x24, 0xd0, 0x44, 0x11, 0x40, 0x00, 0x40, 
  0x00, 0x40, 0x00, 0xf9, 0x08, 0xe9, 0xeb, 0xeb, 0x0a, 0xfa, 0x00, 0xc5, 0x67, 0x30, 0xc0, 0x97, 
  0x4e, 0xcc, 0x82, 0x3f, 0x63, 0xeb, 0x23, 0xff, 0x62, 0xce, 0xfa, 0x6f, 0x00, 0x10, 0x44, 0x10, 
  0x40, 0x80, 0x00, 0x90, 0x6f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf8, 0x30, 0xf8, 0x00, 0x08, 0xf8, 0x08, 0x00, 0xa8, 0xa8, 0xd8, 0x00, 0x00, 0x20, 
  0x20, 0x00, 0x00, 0xf8, 0xa8, 0xd0, 0x00, 0x60, 0x90, 0x60, 0x00, 0xf8, 0x60, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0xf0, 0xe9, 0xc3, 0x87, 0x0e, 0x3c, 0x80, 0x7f, 
  0xfe, 0x01, 0xf7, 0x08, 0x30, 0x50, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0b, 0x14, 0x19, 0x74, 0xab, 0x54, 
  0xa9, 0x54, 0xa8, 0x53, 0xaa, 0xd2, 0xaa, 0xf2, 0x1a, 0x03, 0x78, 0x83, 0xfa, 0xfa, 0xc9, 0x49, 
  0x39, 0xf3, 0x19, 0xf8, 0xf1, 0x1a, 0x12, 0x6b, 0xd2, 0xa3, 0xd2, 0xa2, 0xd0, 0xa9, 0x74, 0x19, 
  0x0d, 0x0a, 0x05, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7c, 0x54, 0x68, 0x00, 0x38, 0x44, 0x38, 0x00, 0x7c, 0x54, 0x78, 0x00, 0x78, 0x14, 
  0x78, 0x00, 0x00, 0x7c, 0x40, 0x7c, 0x00, 0x1c, 0x10, 0x7c, 0x00, 0x04, 0x7c, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0xf0, 0xf8, 0xfd, 0x0e, 0x0e, 0x1b, 0x39, 0xf0, 
  0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x81, 0x03, 0x0f, 0x1e, 0x3c, 0xfe, 0xff, 0xff, 0xff, 0x0e, 
  0x06, 0x06, 0x07, 0x03, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xc0, 0x60, 0xe0, 0x00, 0xe0, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xa0, 0xc0, 0x00, 0xc0, 0xa0, 0xd0, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xc9, 0x83, 0xc7, 0x7e, 0x38, 0x80, 0x7f, 
  0xff, 0x90, 0x9f, 0xf0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xb0, 0xa0, 0xb4, 0xa0, 0xb4, 
  0xa3, 0xb0, 0xaa, 0xa0, 0xb7, 0xa0, 0xa2, 0xb4, 0xa0, 0xb0, 0xb8, 0xbf, 0xbf, 0xaf, 0xaf, 0xbf, 
  0xb0, 0xa0, 0xa2, 0xb8, 0xa0, 0xbb, 0xa4, 0xa0, 0xb9, 0xa0, 0xb4, 0xa0, 0xb0, 0xa8, 0xa0, 0xb8, 
  0xbf, 0xbe, 0xbf, 0xb2, 0xbf, 0xb2, 0xbf, 0xb0, 0xa0, 0xa0, 0xa8, 0xac, 0xbc, 0xbc, 0xac, 0xa8, 
  0xa0, 0xb4, 0xa0, 0xb0, 0xa8, 0xa0, 0xa0, 0xa0, 0xae, 0xbb, 0xb1, 0xb1, 0xb2, 0x98, 0x9c, 0x0e, 
  0xc6, 0x86, 0xc6, 0xe6, 0x6e, 0x1c, 0x38, 0xe4, 0xce, 0x87, 0xa3, 0xa1, 0xb2, 0xb8, 0x9c, 0x8e, 
  0x96, 0xb6, 0x66, 0x66, 0xac, 0x9c, 0xb2, 0x41, 0x3c, 0x42, 0x81, 0x81, 0x85, 0x8d, 0x42, 0x3c
};

// 'boule-1', 6x8px
static const char PROGMEM boule_anim[TAP_FRAMES-1][6] = {
  {0x3c, 0x42, 0xb1, 0xa1, 0x81, 0x81},
  {0x3c, 0x42, 0x9d, 0xb1, 0xa1, 0xa1},
  {0x3c, 0x42, 0x99, 0xbd, 0xbd, 0x99},  //2 alt {0x3c, 0x42, 0x81, 0x99, 0x99, 0x81}, 
  {0x3c, 0x42, 0x85, 0x85, 0x8d, 0xb9}
};

// 'leaf_4-0', 6x8px
static const char PROGMEM leaf_anim_4_0[] = {
  0xa7, 0x1c, 0x38, 0x76, 0x67, 0x63
};
// 'leaf_1-4', 6x8px
static const char PROGMEM leaf_anim_1_4[] = {
  0x4f, 0x40, 0x20, 0x00, 0x00, 0x00
};
// 'leaf_18-7', 6x8px
static const char PROGMEM leaf_anim_18_7[] = {
  0xb2, 0xb9, 0x9d, 0x8f, 0x96, 0xb6
};
// 'leaf_19-5', 6x8px
static const char PROGMEM leaf_anim_19_5[] = {
  0x00, 0x00, 0x00, 0x01, 0x01, 0x01
};
// 'leaf_19-4', 6x8px
static const char PROGMEM leaf_anim_19_4[] = {
  0x00, 0x00, 0x80, 0x40, 0xc0, 0x40
};
// 'leaf_20-2', 6x8px
static const char PROGMEM leaf_anim_20_2[] = {
  0x00, 0x00, 0x86, 0x0d, 0x16, 0xef
};
// 'leaf_3-1', 12x8px
static const char PROGMEM leaf_anim_3_1[] = {
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00
};
// 'leaf_0-5', 12x8px
static const char PROGMEM leaf_anim_0_5[] = {
  0xfe, 0x01, 0xf7, 0x08, 0x08, 0x18, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00
};
// 'leaf_17-6', 12x8px
static const char PROGMEM leaf_anim_17_6[] = {
  0x00, 0x00, 0x60, 0xd0, 0xe0, 0x80, 0x80, 0x40, 0xc0, 0x40, 0x80, 0x00
}; 
// 'leaf_19-3', 12x8px
static const char PROGMEM leaf_anim_19_3[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x2a, 0xff, 0xf8, 0x0c, 0x26, 0x73
};

// 'birds_top_*', 48x8px
static const char PROGMEM birds_top[IDLE_FRAMES_BIRDS][48] = {
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x85, 0x05, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x15, 0x25, 0x05, 0x05, 0x05, 0x25, 0x15, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x85, 0x05, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x85, 0x45, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x45, 0x85, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x15, 0x25, 0x15, 0x05, 0x05, 0x05, 0x05, 0x45, 0x85, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0xc5, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x4d, 0x85, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x15, 0x25, 0x15, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x05, 0x0d},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x15, 0x0d, 0x15, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05}
};
// 'birds_bot_*', 24x8px
static const char PROGMEM birds_bot[IDLE_FRAMES_BIRDS][24] = {
  {0x02, 0x02, 0x62, 0xdc, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x08, 0x10, 0x08, 0x40, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x04, 0x40, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x20, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x80, 0x20, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x10, 0x08, 0x00, 0x00, 0x20, 0x40, 0x20, 0x00, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x02, 0x04, 0x02, 0x00, 0x10, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x00, 0x20, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04}
};

// 'bg_frame', 128x64px
static const char PROGMEM bg_frame[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xf9, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0xf9, 0x03, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x8a, 0x0c, 0x10, 0xef, 0x80, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x28, 0xf3, 0xf8, 0x0c, 0x26, 0x73, 0xf1, 0xee, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0xf0, 0xe9, 0xc3, 0x87, 0x0e, 0x3c, 0x80, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0xf0, 0xf8, 0xfd, 0x0e, 0x0e, 0x1b, 0x39, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xa0, 0xc0, 0x00, 0xc0, 0xa0, 0xd0, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xc9, 0x83, 0xc7, 0x7e, 0x38, 0x80, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x9f, 0xb0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xae, 0xbb, 0xb1, 0xb1, 0xb2, 0x98, 0x9c, 0x0e, 
  0xc6, 0x86, 0xc6, 0xe6, 0x6e, 0x1c, 0x38, 0xe4, 0xce, 0x87, 0xa3, 0xa1, 0xb2, 0xb8, 0x9c, 0x8e, 
  0x96, 0xb6, 0x66, 0x66, 0xac, 0x9c, 0xb2, 0x41, 0x3c, 0x42, 0x81, 0x81, 0x85, 0x8d, 0x42, 0x3c
}; 

// 'moon', 36x36px
static const char PROGMEM moon[4][36] = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0xd0, 0xe8, 0x7c, 0xdc, 0xfe, 0x76, 0x7b, 0xfb,
  0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x67, 0xc7, 0xce, 0xfc, 0xdc, 0xd8, 0xf0, 0xf0,
  0xe0, 0xc0, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x08, 0x08, 0x0a, 0x17, 0x4d, 0xdf, 0xfe, 0xfe, 0xff,
  0xc7, 0xf3, 0x38, 0x38, 0xb8, 0xc3, 0x7f, 0x7f, 0x7f, 0xf8, 0xff, 0xf8, 0xf8, 0xf3, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf8},
  {0x00, 0x00, 0x00, 0x00, 0x20, 0x47, 0x0c, 0x08, 0x08, 0x20, 0x20, 0xf0, 0xff, 0x3f, 0x97, 0x17,
  0x0b, 0x0b, 0x0b, 0x17, 0x2f, 0x9f, 0x9c, 0x9c, 0xfc, 0xf3, 0x73, 0xff, 0xe7, 0x67, 0x1f, 0x1f,
  0xcf, 0xeb, 0x3f, 0x0f},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x03, 0x00, 0x03, 0x03,
  0x46, 0x04, 0x44, 0x00, 0x00, 0x00, 0x03, 0x03, 0x13, 0x0b, 0x0b, 0x03, 0x00, 0x00, 0x04, 0x04,
  0x03, 0x00, 0x00, 0x00}
};

// 'i', 18x24px
static const char PROGMEM i_icon[3][18] = {
  {0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x3e, 0xc1, 0x3e, 0x7f, 0xff, 0xff, 0x90, 0x90, 0xff, 0x7f, 0x3e, 0xc1, 0x3e, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00}
};

// 'i_selected', 18x24px
static const char PROGMEM i_icon_selected[3][18] = {
  {0x00, 0xf0, 0x18, 0x08, 0x88, 0x48, 0x48, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x48, 0x48, 0x88, 0x08, 0x18, 0xf0},
  {0x00, 0xff, 0x00, 0x3e, 0xc1, 0x3e, 0x7f, 0xff, 0xff, 0x90, 0x90, 0xff, 0x7f, 0x3e, 0xc1, 0x3e, 0x00, 0xff},
  {0x00, 0x03, 0x06, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04, 0x06, 0x03}
};
        
// 'gear', 18x8px
static const char PROGMEM gear_icon[3][18] = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0xc0, 0x40, 0xc0, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x38, 0xab, 0xfe, 0xff, 0xc7, 0x93, 0xab, 0x93, 0xc7, 0xff, 0xfe, 0xab, 0x38, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x01, 0x07, 0x05, 0x07, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00}
};

// 'gear_selected', 18x24px
static const char PROGMEM gear_icon_selected[3][18] = {
  {0x00, 0xe0, 0x30, 0x10, 0x10, 0x90, 0x90, 0x10, 0xd0, 0x50, 0xd0, 0x10, 0x90, 0x90, 0x10, 0x10, 0x30, 0xe0},
  {0x00, 0xff, 0x00, 0x38, 0xab, 0xfe, 0xff, 0xc7, 0x93, 0xab, 0x93, 0xc7, 0xff, 0xfe, 0xab, 0x38, 0x00, 0xff},
  {0x00, 0x07, 0x0c, 0x08, 0x09, 0x0a, 0x0b, 0x09, 0x0f, 0x0d, 0x0f, 0x09, 0x0b, 0x0a, 0x09, 0x08, 0x0c, 0x07}
};

#ifdef RGBLIGHT_ENABLE
// 'bouton_led', 48x8px
static const char PROGMEM bouton_led[2][48] = {
  {0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x78, 0x08, 0x08, 0x70, 0x00, 0x00, 0x3c, 0x42, 0x99, 0xad,
  0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0x99, 0x81, 0x81, 0xa9, 0x81, 0xa9, 0x81, 0xa9, 0x81, 0x42,
  0x3c, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x7c, 0x0a, 0x02, 0x7c, 0x0a, 0x02, 0x00, 0x00},
  {0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x78, 0x08, 0x08, 0x70, 0x00, 0x00, 0x3c, 0x42, 0x81, 0xa9,
  0x81, 0xa9, 0x81, 0xa9, 0x81, 0x81, 0x99, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0x99, 0x42,
  0x3c, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x7c, 0x0a, 0x02, 0x7c, 0x0a, 0x02, 0x00, 0x00}
};
#endif
// clang-format on

oled_rotation_t oled_init_user(oled_rotation_t rotation) { return OLED_ROTATION_180; }

static void render_info(void) {
    // Slave
    // 'Background frame info', 128x64px
    oled_write_raw_P(frame_wide_info, sizeof(frame_wide_info));
}

static void render_anim_top_left(void) {
    // animation des feuilles
    // chaotic function the variable will underflow and overflow but it's fine
    //current_idle_frame_chaos_left = 5 * current_idle_frame_chaos_left * (1 - current_idle_frame_chaos_left);
    if (current_idle_frame_rand % 2 == 1) {
        // feuille 1 char
        oled_set_cursor(4, 0);
        oled_write_raw_P(leaf_anim_4_0, sizeof(leaf_anim_4_0));
        //oled_set_cursor(7, 0);
        //oled_write_raw_P(leaf_anim_7_0, sizeof(leaf_anim_7_0));
        oled_set_cursor(1, 4);
        oled_write_raw_P(leaf_anim_1_4, sizeof(leaf_anim_1_4));

        // feuille 2 chars
        oled_set_cursor(3, 1);
        oled_write_raw_P(leaf_anim_3_1, sizeof(leaf_anim_3_1));
        oled_set_cursor(0, 5);
        oled_write_raw_P(leaf_anim_0_5, sizeof(leaf_anim_0_5));
    }

    if (get_current_wpm() > IDLE_SPEED) {
        // animation des boules en coin
        current_tap_frame = (current_tap_frame + 1) % TAP_FRAMES;
        if (current_tap_frame != (TAP_FRAMES-1)) {
            oled_set_cursor(0, 0);
            oled_write_raw_P(boule_anim[current_tap_frame], sizeof(boule_anim[0]));
        }
    }
 
    // birds
    if (get_current_wpm() > TAP_SPEED) {
        // keep incrementing the counter
        current_idle_frame_birds = (current_idle_frame_birds + 1) % IDLE_FRAMES_BIRDS;
        oled_set_cursor(11, 0);
        oled_write_raw_P(birds_top[current_idle_frame_birds], sizeof(birds_top[0]));
        oled_set_cursor(9, 1);
        oled_write_raw_P(birds_bot[current_idle_frame_birds], sizeof(birds_bot[0]));
        // start or keep looping
        looping_animation = true;
    } else {
        if (looping_animation) {
            current_idle_frame_birds = (current_idle_frame_birds + 1) % IDLE_FRAMES_BIRDS;
            if (current_idle_frame_birds == 0) {
                // we are done looping 
                looping_animation = false;
            } else {
                // display the remaining frames 
                oled_set_cursor(11, 0);
                oled_write_raw_P(birds_top[current_idle_frame_birds], sizeof(birds_top[0]));
                oled_set_cursor(9, 1);
                oled_write_raw_P(birds_bot[current_idle_frame_birds], sizeof(birds_bot[0]));
            }
        }
        // nothing to display if not above TAP_SPEEP on not currently looping
    }
}

static void render_anim_bottom_right(void) {
    // animation des feuilles aléatoire
    if (current_idle_frame_rand % 2 == 1) {
        // feuille size 1 char
        oled_set_cursor(18, 7);
        oled_write_raw_P(leaf_anim_18_7, sizeof(leaf_anim_18_7));
        oled_set_cursor(19, 5);
        oled_write_raw_P(leaf_anim_19_5, sizeof(leaf_anim_19_5));
        oled_set_cursor(19, 4);
        oled_write_raw_P(leaf_anim_19_4, sizeof(leaf_anim_19_4));
        oled_set_cursor(20, 2);
        oled_write_raw_P(leaf_anim_20_2, sizeof(leaf_anim_20_2));

        // feuille size 2 chars
        oled_set_cursor(17, 6);
        oled_write_raw_P(leaf_anim_17_6, sizeof(leaf_anim_17_6));
        oled_set_cursor(19, 3);
        oled_write_raw_P(leaf_anim_19_3, sizeof(leaf_anim_19_3));
    }

    // animation boule en bas droite
    if (get_current_wpm() > IDLE_SPEED) {
        current_tap_frame = (current_tap_frame + 1) % TAP_FRAMES;
        if (current_tap_frame != (TAP_FRAMES-1)) {
            // (TAP_FRAMES - 1) because the last frame is included in the background!
            oled_set_cursor(20, 7);
            oled_write_raw_P(boule_anim[current_tap_frame], sizeof(boule_anim[0]));
        }
    }
}

static void render_state(void) { 
    // Master only

    // 'Background frame', 128x64px
    oled_write_raw_P(bg_frame, sizeof(bg_frame));
    
    // onglet et background
    switch (get_highest_layer(layer_state|default_layer_state)) {
        case _BASE:
        case _MOVE:
        case _NUM:
            // 'i' icon selected, 18x24px
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 1+i);
                oled_write_raw_P(i_icon_selected[i], sizeof(i_icon_selected[i]));
            }

            // 'gear' icon, 18x24px
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 4+i);
                oled_write_raw_P(gear_icon[i], sizeof(gear_icon[i]));
            }
                            
            // Host Keyboard Layer Status
            oled_set_cursor(6, 1);
            oled_write_P(PSTR("Layer: "), false);
            switch (get_highest_layer(layer_state)) {
                case _BASE:
                    oled_write_P(PSTR("BASE"), false);
                    break;
                case _MOVE:
                    oled_write_P(PSTR("MOVE"), false);
                    break;
                case _NUM:
                    oled_write_P(PSTR("NUMBERS"), false);
                    break;
                case _SETTINGS:
                    oled_write_P(PSTR("SETTINGS"), false);
                    break;
                default:
                    oled_write_P(PSTR("Undefined"), false);
            }
            
            // Write host Keyboard LED Status to OLEDs
            led_t led_usb_state = host_keyboard_led_state();
            oled_set_cursor(6, 2);
            oled_write_P(led_usb_state.num_lock    ? PSTR("NUMLCK on") : PSTR("NUMLCK off"), false);
            oled_set_cursor(6, 3);
            oled_write_P(led_usb_state.caps_lock   ? PSTR("CAPLCK on") : PSTR("CAPLCK off"), false);
            oled_set_cursor(6, 4);
            oled_write_P(led_usb_state.scroll_lock ? PSTR("SCRLCK on") : PSTR("SCRLCK off"), false);
            
            // Words Per Minute
            oled_set_cursor(6, 5);
            oled_write_P(PSTR("WPM"), false);
            wpm_val = get_current_wpm();
            itoa(wpm_val, str_wpm_val, 10);
            oled_set_cursor(13, 5);
            oled_write(str_wpm_val, false);
            break;

        case _SETTINGS:
            // 'moon' pixel art, 36x36px
            for (int i = 0; i < 4; i++) {
                oled_set_cursor(13, 1+i);
                oled_write_raw_P(moon[i], sizeof(moon[0]));
            }

            #ifdef RGBLIGHT_ENABLE
            oled_set_cursor(4, 1);
            oled_write_P(PSTR("LEDs"), false);
            
            // 'bouton_led', 48x8px
            if (rgblight_is_enabled()) {
                oled_set_cursor(5, 2);
                oled_write_raw_P(bouton_led[0], sizeof(bouton_led[0]));
            } else {
                oled_set_cursor(5, 2);
                oled_write_raw_P(bouton_led[1], sizeof(bouton_led[0]));
            }
            
            // RGB animation mode 
            oled_set_cursor(4, 4);
            oled_write_P(PSTR("Mode"), false);
            rgb_mode = rgblight_get_mode();
            itoa(rgb_mode, str_rgb_mode, 10);
            oled_set_cursor(9, 4);
            oled_write(str_rgb_mode, false);
            
            // Color aka 'rgb_hue'
            oled_set_cursor(4, 5);
            oled_write_P(PSTR("Hue"), false);
            rgb_hue = rgblight_get_hue();
            itoa(rgb_hue, str_rgb_hue, 10);
            oled_set_cursor(9, 5);
            oled_write(str_rgb_hue, false);

            // brightness aka 'rgb_val'
            oled_set_cursor(4, 6);
            oled_write_P(PSTR("Brghtnss"), false);
            rgb_val = rgblight_get_val();
            itoa(rgb_val, str_rgb_val, 10);
            oled_set_cursor(13, 6);
            oled_write(str_rgb_val, false);
            #endif // RGBLIGHT_ENABLE

            // 'i' icon
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 1+i);
                oled_write_raw_P(i_icon[i], sizeof(i_icon[i]));
            }
            
            // 'gear' icon selected, 18x24px
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 4+i);
                oled_write_raw_P(gear_icon_selected[i], sizeof(gear_icon_selected[i]));
            }
            break;

        default:
            break;
    }
}

void render_sides(void) {
    if (!is_keyboard_master()) {
        render_info();
        render_anim_bottom_right();
        render_anim_top_left();
    } else {
        render_state();
        render_anim_bottom_right();
    }
}

bool oled_task_user(void) {
    if (timer_elapsed32(anim_timer) > ANIM_FRAME_DURATION) {
        // it is time to render a frame
        anim_timer = timer_read32();
        current_idle_frame_rand = rand();

        if (get_current_wpm() != 0) { 
            // if we start typing the screen wakes up
            oled_on();
            // and the sleep timer is reset
            anim_sleep = timer_read32();

            // each side are rendered separately
            render_sides();

        } else if (timer_elapsed32(anim_sleep) > OLED_TIMEOUT) {
            // ok but if we stop typing the screen goes to sleep after OLED_TIMEOUT
            oled_off();
        } else {
            // as long as the timeout is not reached we need to keep rendering the idle animation
            render_sides();
        }
    }
    return false;
}
#endif // OLED_ENABLE

#ifdef ENCODER_ENABLE
bool encoder_update_user(uint8_t index, bool clockwise) {
    if (index == 0) {
        // Volume or hue control
        if (clockwise) {
            switch (get_highest_layer(layer_state)) {
                #ifdef RGBLIGHT_ENABLE
                case _SETTINGS:
                    rgblight_decrease_hue_noeeprom();
                    break;
                #endif
                default:
                  tap_code(KC_VOLD);
            }
        } else {
            switch (get_highest_layer(layer_state)) {
                #ifdef RGBLIGHT_ENABLE
                case _SETTINGS:
                    rgblight_increase_hue_noeeprom();
                    break;
                #endif
                default:
                  tap_code(KC_VOLU);
            }
        }
    } else if (index == 1) {
        // Page up/Page down or RGB Brightness
        if (clockwise) {
            switch (get_highest_layer(layer_state)) {
                #ifdef RGBLIGHT_ENABLE
                case _SETTINGS:
                    rgblight_decrease_val_noeeprom();
                    break;
                #endif
                default:
                  tap_code(KC_PGDN);
            }
        } else {
            switch (get_highest_layer(layer_state)) {
                #ifdef RGBLIGHT_ENABLE
                case _SETTINGS:
                    rgblight_increase_val_noeeprom();
                    break;
                #endif
                default:
                  tap_code(KC_PGUP);
            }
        }
    }
    return false;
}
#endif // ENCODER_ENABLE