#include QMK_KEYBOARD_H

#ifdef OLED_ENABLE

enum layers {
    _BASE = 0,
    _MOVE = 1,
    _NUM = 2,
    _SETTINGS = 3,
};

#ifdef THUNDER 

#define TOTAL_TAP_CHUNKS_RIGHT 56 //76
#define TOTAL_TAP_CHUNKS_LEFT 44 //67
#define ANIM_FRAME_DURATION 55  // how long each frame lasts in ms
#define IDLE_FRAMES 0 //5
#define IDLE_SPEED 30
#define TAP_SPEED 60
#define TAP_FRAMES 6 //10
#define RIGHT 0
#define LEFT 1

uint8_t side = RIGHT; // ça passe pas en argument...

static uint32_t anim_timer = 0;
static uint32_t anim_sleep = 0;
static uint8_t current_frame = 0;
//uint8_t current_frame_idx[2] = {0,0};
static uint8_t current_frame_idx = 0;
static bool looping_animation = false;
//static bool finish_thunder_animation = false;

static const uint8_t total_tap_chunks[] = {
    TOTAL_TAP_CHUNKS_RIGHT,
    TOTAL_TAP_CHUNKS_LEFT
};

// RGB related vars
/*
enum RGBLIGHT_EFFECT_MODE rgb_mode;
char str_rgb_mode[3+1];
uint8_t rgb_val;
char str_rgb_val[3+1]; // %03d + '\0' added by itoa
uint8_t rgb_hue;
char str_rgb_hue[3+1];
*/

// clang-format off

static const uint8_t nb_of_chunks[2][TAP_FRAMES] = {
    // right
    {
    //    2,  //0
    //    2,  //1
    //    4,  //2
    //    6,  //3
    //    8,  //4
        6,  //5
        16, //6
        16, //7
        8,  //8
        8,  //9
        2   //10
    },
        // left
    {
    //    1,  //0
    //    4,  //1
    //    7,  //2
    //    7,  //3
    //    5,  //4
        3,  //5
        15, //6
        12, //7
        8,  //8
        5,  //9
        1,  //10
    }
};

// PROGMEM non utilisable pour ça
static const uint8_t chunk_position[2][TOTAL_TAP_CHUNKS_RIGHT][2] = {
    // right
    {
    //    {18,1},{18,2}, //0
    //    {18,0},{18,1}, //1
    //    {17,2}, {18,1}, {17,3}, {18,2}, //2
    //    {16,2}, {18,1}, {18,2}, {16,3}, {18,2}, {18,3}, //3
    //    {14,1}, {14,3}, {18,1}, {18,3}, {14,2}, {14,4}, {18,2}, {18,4}, //4
        {14,1}, {14,3}, {18,3}, {14,2}, {14,4}, {18,4},//5 
        {0,1}, {2,2}, {4,3}, {8,3}, {12,3}, {14,2}, {16,3}, {18,2}, {0,2}, {2,3}, {4,4}, {8,4}, {12,4}, {14,3}, {16,4}, {18,3},//6
        {4,2}, {6,1}, {10,1}, {14,1}, {18,1}, {18,3}, {0,3}, {0,4}, {4,3}, {6,2}, {10,2}, {14,2}, {18,2}, {18,4}, {0,2}, {0,3},//7
        {0,1}, {4,1}, {10,4}, {14,5}, {0,2}, {4,2}, {10,5}, {14,6}, //8
        {0,0}, {4,0}, {12,6}, {16,6}, {0,1}, {4,1}, {12,7}, {16,7}, //9
        {14,6}, {14,7} //10
    },
    // left
    {
    //    {0,6}, //0 //0-0
    //    {0,4}, {0,5}, {0,6}, {0,7}, //1 //1-4
    //    {0,3}, {0,7}, {3,6}, {4,3}, {4,4}, {4,5}, {4,7}, //2 //5-11
    //    {0,3}, {0,7}, {3,2}, {3,6}, {7,3}, {7,4}, {7,5}, //3 //12-18
    //    {0,3}, {0,7}, {4,2}, {7,5}, {8,3}, // 4 //19-23
        {5,2}, {7,5}, {9,3}, //5 //24-26
        {0,1}, {0,2}, {0,3}, {2,4}, {4,3}, {6,2}, {6,4}, {8,3}, {10,2}, {12,3}, {14,1}, {14,2}, {18,0}, {18,1}, {18,2}, //6 //27-41
        {4,1}, {4,2}, {8,1}, {8,2}, {10,3}, {12,2}, {14,3}, {14,4}, {18,3}, {18,4}, {0,2}, {0,3},//7 42-53
        {1,5}, {4,4}, {5,5}, {8,4}, {10,3}, {18,2}, {0,3}, {0,4}, //8 54-61
        {2,5}, {3,6}, {6,5}, {11,3}, {11,4}, //9
        {0,6} //10
    }
};

static const char PROGMEM thunder[2][TOTAL_TAP_CHUNKS_RIGHT][24] = {
    // right
    {
        /*0*/
        // 'thunder_top_right-0', 24x8px
         //    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-0', 24x8px
         //    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

        ///*1*/
        //// 'thunder_top_right-1', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-1', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0x14, 0x12, 0x12, 0x11, 0x10, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00}, 

        ///*2*/
        //// 'thunder_top_right-2', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_top_right-3', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x1c, 0x0f, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-2', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01}, 
        //// 'thunder_bot_right-3', 24x8px
        //{0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00}, 

        ///*3*/
        //// 'thunder_top_right-4', 24x8px
        //{0x00, 0x00, 0x00, 0x80, 0x60, 0x10, 0x08, 0x04, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_top_right-5', 24x8px
        //{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x08, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_top_right-6', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-4', 24x8px
        //{0x00, 0x00, 0x0c, 0x13, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20}, 
        //// 'thunder_bot_right-5', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-6', 24x8px
        //{0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00}, 
        
        ///*4*/
        //// 'thunder_top_right-7', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x20, 0x20}, 
        //// 'thunder_top_right-8', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x20, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_top_right-9', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_top_right-10', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-7', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-8', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-9', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_bot_right-10', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

        /*5*/
        // 'thunder_top_right-11', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-12', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-13', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-11', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-12', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-13', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        /*6*/
        // 'thunder_top_right-14', 24x8px
        {0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-15', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-16', 24x8px
        {0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80}, 
        // 'thunder_top_right-17', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0}, 
        // 'thunder_top_right-18', 24x8px
        {0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff}, 
        // 'thunder_top_right-19', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0}, 
        // 'thunder_top_right-20', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, 
        // 'thunder_top_right-21', 24x8px
        {0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-14', 24x8px
        {0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8}, 
        // 'thunder_bot_right-15', 24x8px
        {0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe}, 
        // 'thunder_bot_right-16', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x7f}, 
        // 'thunder_bot_right-17', 24x8px
        {0x7f, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0x7c, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f}, 
        // 'thunder_bot_right-18', 24x8px
        {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07}, 
        // 'thunder_bot_right-19', 24x8px
        {0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, 
        // 'thunder_bot_right-20', 24x8px
        {0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-21', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00}, 
        
        /*7*/
        // 'thunder_top_right-24', 24x8px
        {0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe}, 
        // 'thunder_top_right-25', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80}, 
        // 'thunder_top_right-26', 24x8px
        {0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8}, 
        // 'thunder_top_right-27', 24x8px
        {0xf8, 0xf8, 0xfc, 0xfc, 0x7c, 0x7c, 0x7c, 0x7c, 0x3e, 0x3e, 0x3e, 0x3e, 0x1e, 0x1e, 0x1f, 0x1f, 0x3f, 0x7f, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8}, 
        // 'thunder_top_right-28', 24x8px
        {0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-29', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-22', 24x8px
        {0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f}, 
        // 'thunder_bot_right-23', 24x8px
        {0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-24', 24x8px
        {0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, 
        // 'thunder_bot_right-25', 24x8px
        {0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f}, 
        // 'thunder_bot_right-26', 24x8px
        {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, 
        // 'thunder_bot_right-27', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x0f}, 
        // 'thunder_bot_right-28', 24x8px
        {0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-29', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-22', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0}, 
        // 'thunder_top_right-23', 24x8px
        {0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f}, 

        /*8*/
        // 'thunder_top_right-30', 24x8px
        {0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0x70, 0x70, 0x78, 0x78, 0x38, 0x38, 0x78, 0x78, 0xf0, 0xf0, 0xe0, 0xe0}, 
        // 'thunder_top_right-31', 24x8px
        {0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-32', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-33', 24x8px
        {0xf0, 0xf0, 0xe0, 0xe0, 0xf0, 0xf0, 0x70, 0x70, 0x38, 0x38, 0x38, 0x38, 0x1c, 0x1c, 0x0c, 0x0c, 0x04, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-30', 24x8px
        {0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01}, 
        // 'thunder_bot_right-31', 24x8px
        {0x03, 0x03, 0x06, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-32', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x06, 0x0e, 0x0e, 0x1c, 0x1c, 0x3c, 0x3c, 0x78, 0x78, 0x78, 0x78, 0xf0, 0xf0}, 
        // 'thunder_bot_right-33', 24x8px
        {0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        /*9*/
        // 'thunder_top_right-34', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-35', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_top_right-36', 24x8px
        {0x00, 0x00, 0x00, 0x02, 0x02, 0x06, 0x04, 0x0c, 0x0c, 0x18, 0x18, 0x18, 0x38, 0x30, 0x30, 0x70, 0x60, 0xe0, 0xe0, 0xf0, 0x70, 0x70, 0x38, 0x38}, 
        // 'thunder_top_right-37', 24x8px
        {0x18, 0x1c, 0x0c, 0x0e, 0x06, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-34', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x10, 0x18, 0x0c, 0x0c, 0x06, 0x06, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x06, 0x0c}, 
        // 'thunder_bot_right-35', 24x8px
        {0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-36', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_bot_right-37', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        /*10*/
        // 'thunder_top_right-38', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        // 'thunder_bot_right-38', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x18, 0x1c, 0x0e, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
    },
    // left
    {
        /*0*/
        // 'thunder_left-0', 24x8px
        //    {0xff, 0xff, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        ///*1*/
        //// 'thunder_left-1', 24x8px
        //{0x07, 0x06, 0x08, 0x08, 0x10, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-2', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10, 0x90, 0x90, 0x50, 0x50, 0x20, 0x20, 0x00, 0x00}, 
        //// 'thunder_left-3', 24x8px
        //{0xc0, 0xc0, 0x60, 0x20, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-4', 24x8px
        //{0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-5', 24x8px
        //{0xc0, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}, 
        //// 'thunder_left-6', 24x8px
        //{0x06, 0x06, 0x06, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02}, 
        //// 'thunder_left-7', 24x8px
        //{0x00, 0x00, 0x00, 0x18, 0x24, 0x44, 0x82, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-8', 24x8px
        //{0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x20, 0xc0, 0x00, 0x00}, 
        //// 'thunder_left-9', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x18, 0x07, 0x00, 0x00}, 
        //// 'thunder_left-10', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-11', 24x8px
        //{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-12', 24x8px
        //{0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-13', 24x8px
        //{0x06, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, 
        //// 'thunder_left-14', 24x8px
        //{0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-15', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-16', 24x8px
        //{0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-17', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-18', 24x8px
        //{0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-19', 24x8px
        //{0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-20', 24x8px
        //{0x00, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-21', 24x8px
        //{0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-22', 24x8px
        //{0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        //// 'thunder_left-23', 24x8px
        //{0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-24', 24x8px
        {0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-25', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-26', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-27', 24x8px
        {0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-28', 24x8px
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-29', 24x8px
        {0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8}, 
        // 'thunder_left-30', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f}, 
        // 'thunder_left-31', 24x8px
        {0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8}, 
        // 'thunder_left-32', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80}, 
        // 'thunder_left-33', 24x8px
        {0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-34', 24x8px
        {0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07}, 
        // 'thunder_left-35', 24x8px
        {0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x7f}, 
        // 'thunder_left-36', 24x8px
        {0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-37', 24x8px
        {0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff}, 
        // 'thunder_left-38', 24x8px
        {0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00}, 
        // 'thunder_left-39', 24x8px
        {0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-40', 24x8px
        {0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-41', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00}, 
        
        /*7*/
        // 'thunder_left-44', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0}, 
        // 'thunder_left-45', 24x8px
        {0xfc, 0xfc, 0xfe, 0xfe, 0x7e, 0x7e, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01}, 
        // 'thunder_left-46', 24x8px
        {0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0x7c, 0x7c, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00}, 
        // 'thunder_left-47', 24x8px
        {0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f}, 
        // 'thunder_left-48', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f}, 
        // 'thunder_left-49', 24x8px
        {0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-50', 24x8px
        {0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0}, 
        // 'thunder_left-51', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, 
        // 'thunder_left-52', 24x8px
        {0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-53', 24x8px
        {0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-42', 24x8px
        {0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc}, 
        // 'thunder_left-43', 24x8px
        {0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01}, 

        /*8*/
        // 'thunder_left-56', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3e, 0x3e}, 
        // 'thunder_left-57', 24x8px
        {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0}, 
        // 'thunder_left-58', 24x8px
        {0x7e, 0x7e, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00}, 
        // 'thunder_left-59', 24x8px
        {0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0x7c, 0x7c, 0x3c, 0x3c, 0x3e, 0x1e, 0x1e, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01}, 
        // 'thunder_left-60', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0x60, 0x70, 0x70, 0x30, 0x30, 0x18, 0x08, 0x08, 0x00, 0x00}, 
        // 'thunder_left-61', 24x8px
        {0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x18, 0x18, 0x08, 0x08, 0x0c, 0x0c, 0x04, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-54', 24x8px
        {0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-55', 24x8px
        {0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7e, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0}, 

        /*9*/
        // 'thunder_left-62', 24x8px
        {0x0c, 0x0c, 0x38, 0x38, 0x78, 0x78, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0}, 
        // 'thunder_left-63', 24x8px
        {0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-64', 24x8px
        {0xe0, 0xe0, 0x60, 0x60, 0x30, 0x30, 0x30, 0x30, 0x18, 0x18, 0x18, 0x18, 0x0c, 0x0c, 0x04, 0x04, 0x06, 0x06, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00}, 
        // 'thunder_left-65', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        // 'thunder_left-66', 24x8px
        {0x00, 0x00, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x06, 0x06, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
        
        /*10*/
        // 'thunder_left-67', 24x8px
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x06, 0x06, 0x0e, 0x0c, 0x1c, 0x1c, 0x18, 0x18, 0x30, 0x30, 0x30, 0x20, 0x60, 0x40}
    }
};

// clang-format on

void render_frame(void) {
    for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_frame]; chunk_sub_idx++) {
        oled_set_cursor(chunk_position[side][current_frame_idx+chunk_sub_idx][0], chunk_position[side][current_frame_idx+chunk_sub_idx][1]);
        oled_write_raw_P(thunder[side][current_frame_idx+chunk_sub_idx], sizeof(thunder[side][0]));
    }
}

/*
static void increment_index(void) {
    current_frame_idx = (current_frame_idx + nb_of_chunks[side][current_frame]) % total_tap_chunks[side];
    current_frame = (current_frame + 1) % TAP_FRAMES;
}
*/


static void render_thunder(void) {
    // version light
    oled_clear();
    
    if (current_frame == 0) {
        if (get_current_wpm() > IDLE_SPEED) {
            looping_animation = true;
            for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_frame]; chunk_sub_idx++) {
                oled_set_cursor(chunk_position[side][current_frame_idx+chunk_sub_idx][0], chunk_position[side][current_frame_idx+chunk_sub_idx][1]);
                oled_write_raw_P(thunder[side][current_frame_idx+chunk_sub_idx], sizeof(thunder[side][0]));
            }
        } else {
            looping_animation = false;
        }/*
    } else if (current_frame < IDLE_FRAMES) {
        if (looping_animation) {
            for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_frame]; chunk_sub_idx++) {
                oled_set_cursor(chunk_position[side][current_frame_idx+chunk_sub_idx][0], chunk_position[side][current_frame_idx+chunk_sub_idx][1]);
                oled_write_raw_P(thunder[side][current_frame_idx+chunk_sub_idx], sizeof(thunder[side][0]));
            }
        }
    } else if (current_frame == IDLE_FRAMES) {
        if ((looping_animation) && (get_current_wpm() > TAP_SPEED)) {
            looping_animation = true;
            for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_frame]; chunk_sub_idx++) {
                oled_set_cursor(chunk_position[side][current_frame_idx+chunk_sub_idx][0], chunk_position[side][current_frame_idx+chunk_sub_idx][1]);
                oled_write_raw_P(thunder[side][current_frame_idx+chunk_sub_idx], sizeof(thunder[side][0]));
            }
        } else {
            looping_animation = false;
        }*/
    } else {
        if (looping_animation) {
            for (int chunk_sub_idx; chunk_sub_idx < nb_of_chunks[side][current_frame]; chunk_sub_idx++) {
                oled_set_cursor(chunk_position[side][current_frame_idx+chunk_sub_idx][0], chunk_position[side][current_frame_idx+chunk_sub_idx][1]);
                oled_write_raw_P(thunder[side][current_frame_idx+chunk_sub_idx], sizeof(thunder[side][0]));
            }
        }
    } 


    current_frame_idx = (current_frame_idx + nb_of_chunks[side][current_frame]) % total_tap_chunks[side];
    //current_frame_idx = (current_frame_idx == (total_tap_chunks[side] - 1)) ? 0 : current_frame_idx + nb_of_chunks[side][current_frame];
    current_frame = (current_frame + 1) % TAP_FRAMES;
    //current_frame = (current_frame == (TAP_FRAMES - 1)) ? 0 : current_frame + 1;
}



/*
uint8_t wpm_val;
char str_wpm_val[3+1];

static void draw_wpm(void) {
    // Words Per Minute
    //oled_set_cursor(6, 5);
    //oled_write_P(PSTR("WPM"), false);
    wpm_val = get_current_wpm();
    //if (wpm_val != 0) {
        itoa(wpm_val, str_wpm_val, 10);
        oled_set_cursor(17, 7);
        oled_write(str_wpm_val, false);
    //}
}
*/

#ifdef RGBLIGHT_ENABLE

/*
// 'bouton_led', 48x8px
static const char PROGMEM bouton_led[2][33] = { // should be 48, chopped "off" off
  {0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x78, 0x08, 0x08, 0x70, 0x00, 0x00, 0x3c, 0x42, 0x99, 0xad,
  0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0x99, 0x81, 0x81, 0xa9, 0x81, 0xa9, 0x81, 0xa9, 0x81, 0x42,
  0x3c},// 0x00, 0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x7c, 0x0a, 0x02, 0x7c, 0x0a, 0x02, 0x00, 0x00},
  {0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x78, 0x08, 0x08, 0x70, 0x00, 0x00, 0x3c, 0x42, 0x81, 0xa9,
  0x81, 0xa9, 0x81, 0xa9, 0x81, 0x81, 0x99, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0x99, 0x42,
  0x3c}//, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x7c, 0x0a, 0x02, 0x7c, 0x0a, 0x02, 0x00, 0x00}
};

static void render_led_status(void) { 
    oled_set_cursor(0, 6);
    oled_write_P(PSTR("LED SETTINGS"), false);
    // 'bouton_led', 48x8px
    if (rgblight_is_enabled()) {
    oled_set_cursor(0, 7);
    oled_write_raw_P(bouton_led[0], sizeof(bouton_led[0]));
    } else {
    oled_set_cursor(0, 7);
    oled_write_raw_P(bouton_led[1], sizeof(bouton_led[0]));
    }

    // RGB animation mode 
    //oled_set_cursor(9, 4);
    //oled_write_P(PSTR("Mode"), false);
    rgb_mode = rgblight_get_mode();
    itoa(rgb_mode, str_rgb_mode, 10);
    oled_set_cursor(9, 7);
    oled_write(str_rgb_mode, false);

    // Color aka 'rgb_hue'
    //oled_set_cursor(12, 7);
    //oled_write_P(PSTR("Hue"), false);
    rgb_hue = rgblight_get_hue();
    itoa(rgb_hue, str_rgb_hue, 10);
    oled_set_cursor(12, 7);
    oled_write(str_rgb_hue, false);

    // brightness aka 'rgb_val'
    //oled_set_cursor(4, 6);
    //oled_write_P(PSTR("Brghtnss"), false);
    rgb_val = rgblight_get_val();
    itoa(rgb_val, str_rgb_val, 10);
    oled_set_cursor(16, 7);
    oled_write(str_rgb_val, false);
}
*/
#ifdef DYNAMIC_MACRO_ENABLE

#define PRINT_DM_NB_FRAMES 6

static bool recording = false;
static bool full = false;
static bool saved1 = false;
uint32_t times_saved = PRINT_DM_NB_FRAMES + 1;
static bool playing1 = false;
uint32_t times_played = PRINT_DM_NB_FRAMES + 1;

void dynamic_macro_record_start_user(void) {
    recording = true;
    full = false;
}

void dynamic_macro_play_user(int8_t direction) {
    times_played = 0;
    if (direction > 0) { // 4bytes lighter than playing1 = (direction > 0)
        playing1 = true;
    }
}

void dynamic_macro_record_end_user(int8_t direction) {
    recording = false;
    times_saved = 0;
    if (direction > 0) {
        saved1 = true;
    }
}

void dynamic_macro_record_key_user(int8_t direction, keyrecord_t *record) {
    full = true;
}

#endif // DYNAMIC_MACRO_ENABLE

static void render_layer(void) { 
    led_t led_usb_state = host_keyboard_led_state();
    
    oled_set_cursor(0, 6);
    oled_write_P(led_usb_state.caps_lock ? PSTR("CAP ") : PSTR(""), false);
    oled_write_P(led_usb_state.scroll_lock ? PSTR("SCR") : PSTR(""), false);

    // macro related infos
    oled_set_cursor(9, 7);
    if (recording) {
        oled_write_P(PSTR("REC "), false);
        if (full) {
            oled_write_P(PSTR(" FULL!"), false);
        }
        //itoa(dm_size, str_dm_size, 10);
        //oled_write(str_dm_size, false);
    } 
    
    if (times_saved < PRINT_DM_NB_FRAMES) {
        times_saved++;
        oled_write_P(PSTR("SAVED"), false);
        oled_write_P(saved1 ? PSTR(" 1") : PSTR(" 2"), false);
    } else if (times_saved == PRINT_DM_NB_FRAMES) {
        saved1 = false;
     }

    if (times_played < PRINT_DM_NB_FRAMES) {
        times_played++;
        oled_write_P(PSTR("PLAYING"), false);
        oled_write_P(playing1 ? PSTR(" 1") : PSTR(" 2"), false);
    } else if (times_played == PRINT_DM_NB_FRAMES) {
        playing1 = false;
    }

    oled_set_cursor(0, 7);
    switch (get_highest_layer(layer_state)) {
        case _BASE:
            // Write host Keyboard LED Status to OLEDs
            //oled_set_cursor(5, 7);
            //oled_write_P(led_usb_state.num_lock    ? PSTR("NUM") : PSTR(""), false);
            //draw_wpm();
            break;
        case _MOVE:
            oled_write_P(PSTR("MOVE"), false);
            break;
        case _NUM:
            oled_write_P(PSTR("NUMBERS"), false);
            break;
        case _SETTINGS:
            oled_write_P(PSTR("SETTINGS"), false);
            //render_led_status();
        //    break;
        //default:
        //    oled_write_P(PSTR("????"), false);
    }
}

#endif // RGBLIGHT_ENABLE


/*static void render_logo(void) {

}*/

oled_rotation_t oled_init_user(oled_rotation_t rotation) { return OLED_ROTATION_180; }

void render_sides(void) {
    if (is_keyboard_left()) {
        // passé en argument ça casse tout ??
        // si je passe un argument l'éclair ne se fait que rarement WTF
        side = LEFT;
        // si render_thunder() est en dehors de la boucle, pas d'éclair
        // un problème de scope ?
        // si side = is_keyboard_left() ? LEFT : RIGHT; alors pas d'étincelle et que l'éclair !!!
        render_thunder();
        //render_led_status();
    } else {
        side = RIGHT;
        render_thunder();
        //TODO Kyria logo avec rev : render_logo();
    }

    if (is_keyboard_master()) {
        render_layer();
    }
}

#endif // THUNDER

#ifdef BIRDS

#define ANIM_FRAME_DURATION 250  // how long each frame lasts in ms
#define IDLE_FRAMES 2
#define IDLE_FRAMES_BIRDS 18
#define IDLE_SPEED 20 
#define PREP_FRAMES 2
#define TAP_FRAMES 5
#define TAP_SPEED 50

// RGB related vars
enum RGBLIGHT_EFFECT_MODE rgb_mode;
char str_rgb_mode[3+1];
uint8_t rgb_val;
char str_rgb_val[3+1]; // %03d + '\0' added by itoa
uint8_t rgb_hue;
char str_rgb_hue[3+1];
uint8_t wpm_val;
char str_wpm_val[3+1];

// Animation related vars
uint32_t anim_timer = 0;
uint32_t anim_sleep = 0;
uint8_t current_idle_frame_rand = 0;
uint8_t current_idle_frame_birds = 0;
uint8_t current_prep_frame = 0;
uint8_t current_frame = 0;
bool looping_animation = false;

// clang-format off
// 'frame_wide_info_wo_birds', 128x64px
static const char PROGMEM frame_wide_info[] = {
  0x3c, 0x42, 0x81, 0x81, 0x85, 0x8d, 0x42, 0x3c, 0x82, 0x4d, 0x39, 0x35, 0x66, 0x66, 0x6d, 0x69, 
  0x71, 0x39, 0x1d, 0x4d, 0x85, 0xc5, 0xe1, 0x73, 0x27, 0x1c, 0x38, 0x76, 0x67, 0x63, 0x61, 0x63, 
  0x70, 0x39, 0x19, 0x4d, 0x8d, 0x8d, 0xdd, 0x75, 0xc5, 0xa5, 0x65, 0x25, 0x45, 0x25, 0x25, 0x25, 
  0x25, 0x25, 0x25, 0x25, 0xc5, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0f, 0xf9, 0x09, 0xff, 
  0xfe, 0x01, 0x1c, 0x7e, 0xe3, 0xc1, 0x83, 0x06, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb8, 0xe4, 0x8a, 0x21, 0x08, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0xfe, 0xff, 
  0x60, 0x30, 0x78, 0xee, 0xc7, 0x00, 0x80, 0xc0, 0xe0, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x80, 0xc0, 
  0xe0, 0x80, 0x40, 0xe0, 0xc0, 0x00, 0x40, 0xe6, 0xf3, 0x00, 0x90, 0xc8, 0x2c, 0x2c, 0xfc, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 
  0x0f, 0x9f, 0xd8, 0x70, 0x70, 0xbf, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
  0xd7, 0x89, 0x00, 0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0xba, 0x72, 0xa0, 0x38, 0xd8, 
  0x48, 0x90, 0x28, 0x86, 0x00, 0xfe, 0x82, 0xba, 0xba, 0xba, 0x83, 0xff, 0x01, 0x41, 0x41, 0x42, 
  0xc2, 0x84, 0xf8, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0x07, 
  0x02, 0x00, 0x00, 0x07, 0x07, 0x02, 0x60, 0xcf, 0x9f, 0x88, 0x44, 0x3f, 0x1f, 0x00, 0x00, 0x1f, 
  0x1f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x04, 0x01, 0x03, 0x02, 0x02, 0x03, 0x03, 
  0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x8a, 0x0c, 0x10, 0xef, 0x80, 0x7f, 
  0xfe, 0x01, 0x3c, 0x70, 0xe1, 0xc3, 0x97, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x10, 0x0c, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 
  0x02, 0x02, 0x00, 0x02, 0x9a, 0x3a, 0x9a, 0x5c, 0x60, 0xaa, 0x9c, 0x42, 0x65, 0x40, 0x19, 0x6a, 
  0xb8, 0x96, 0x70, 0xd7, 0xb2, 0x78, 0x7c, 0xfa, 0x12, 0xb2, 0xa4, 0x62, 0x00, 0x00, 0x00, 0x01, 
  0x00, 0x00, 0x00, 0x0c, 0x13, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x7c, 0x08, 0x04, 0x0c, 0x00, 0x38, 0x54, 0x4c, 0x20, 0x08, 0x3c, 0x40, 0x38, 0x04, 
  0x40, 0x00, 0x06, 0xcb, 0xa3, 0x9b, 0xc6, 0xc0, 0x00, 0x80, 0x04, 0x86, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x28, 0xf3, 0xf8, 0x0c, 0x26, 0x73, 0xf1, 0xee, 
  0x7d, 0x83, 0xc6, 0x64, 0x30, 0x1f, 0x4f, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x32, 0x24, 0xd0, 0x44, 0x11, 0x40, 0x00, 0x40, 
  0x00, 0x40, 0x00, 0xf9, 0x08, 0xe9, 0xeb, 0xeb, 0x0a, 0xfa, 0x00, 0xc5, 0x67, 0x30, 0xc0, 0x97, 
  0x4e, 0xcc, 0x82, 0x3f, 0x63, 0xeb, 0x23, 0xff, 0x62, 0xce, 0xfa, 0x6f, 0x00, 0x10, 0x44, 0x10, 
  0x40, 0x80, 0x00, 0x90, 0x6f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf8, 0x30, 0xf8, 0x00, 0x08, 0xf8, 0x08, 0x00, 0xa8, 0xa8, 0xd8, 0x00, 0x00, 0x20, 
  0x20, 0x00, 0x00, 0xf8, 0xa8, 0xd0, 0x00, 0x60, 0x90, 0x60, 0x00, 0xf8, 0x60, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0xf0, 0xe9, 0xc3, 0x87, 0x0e, 0x3c, 0x80, 0x7f, 
  0xfe, 0x01, 0xf7, 0x08, 0x30, 0x50, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0b, 0x14, 0x19, 0x74, 0xab, 0x54, 
  0xa9, 0x54, 0xa8, 0x53, 0xaa, 0xd2, 0xaa, 0xf2, 0x1a, 0x03, 0x78, 0x83, 0xfa, 0xfa, 0xc9, 0x49, 
  0x39, 0xf3, 0x19, 0xf8, 0xf1, 0x1a, 0x12, 0x6b, 0xd2, 0xa3, 0xd2, 0xa2, 0xd0, 0xa9, 0x74, 0x19, 
  0x0d, 0x0a, 0x05, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7c, 0x54, 0x68, 0x00, 0x38, 0x44, 0x38, 0x00, 0x7c, 0x54, 0x78, 0x00, 0x78, 0x14, 
  0x78, 0x00, 0x00, 0x7c, 0x40, 0x7c, 0x00, 0x1c, 0x10, 0x7c, 0x00, 0x04, 0x7c, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0xf0, 0xf8, 0xfd, 0x0e, 0x0e, 0x1b, 0x39, 0xf0, 
  0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x81, 0x03, 0x0f, 0x1e, 0x3c, 0xfe, 0xff, 0xff, 0xff, 0x0e, 
  0x06, 0x06, 0x07, 0x03, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xc0, 0x60, 0xe0, 0x00, 0xe0, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xa0, 0xc0, 0x00, 0xc0, 0xa0, 0xd0, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xc9, 0x83, 0xc7, 0x7e, 0x38, 0x80, 0x7f, 
  0xff, 0x90, 0x9f, 0xf0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xb0, 0xa0, 0xb4, 0xa0, 0xb4, 
  0xa3, 0xb0, 0xaa, 0xa0, 0xb7, 0xa0, 0xa2, 0xb4, 0xa0, 0xb0, 0xb8, 0xbf, 0xbf, 0xaf, 0xaf, 0xbf, 
  0xb0, 0xa0, 0xa2, 0xb8, 0xa0, 0xbb, 0xa4, 0xa0, 0xb9, 0xa0, 0xb4, 0xa0, 0xb0, 0xa8, 0xa0, 0xb8, 
  0xbf, 0xbe, 0xbf, 0xb2, 0xbf, 0xb2, 0xbf, 0xb0, 0xa0, 0xa0, 0xa8, 0xac, 0xbc, 0xbc, 0xac, 0xa8, 
  0xa0, 0xb4, 0xa0, 0xb0, 0xa8, 0xa0, 0xa0, 0xa0, 0xae, 0xbb, 0xb1, 0xb1, 0xb2, 0x98, 0x9c, 0x0e, 
  0xc6, 0x86, 0xc6, 0xe6, 0x6e, 0x1c, 0x38, 0xe4, 0xce, 0x87, 0xa3, 0xa1, 0xb2, 0xb8, 0x9c, 0x8e, 
  0x96, 0xb6, 0x66, 0x66, 0xac, 0x9c, 0xb2, 0x41, 0x3c, 0x42, 0x81, 0x81, 0x85, 0x8d, 0x42, 0x3c
};

// 'boule-1', 6x8px
static const char PROGMEM boule_anim[TAP_FRAMES-1][6] = {
  {0x3c, 0x42, 0xb1, 0xa1, 0x81, 0x81},
  {0x3c, 0x42, 0x9d, 0xb1, 0xa1, 0xa1},
  {0x3c, 0x42, 0x99, 0xbd, 0xbd, 0x99},  //2 alt {0x3c, 0x42, 0x81, 0x99, 0x99, 0x81}, 
  {0x3c, 0x42, 0x85, 0x85, 0x8d, 0xb9}
};

// 'leaf_4-0', 6x8px
static const char PROGMEM leaf_anim_4_0[] = {
  0xa7, 0x1c, 0x38, 0x76, 0x67, 0x63
};
// 'leaf_1-4', 6x8px
static const char PROGMEM leaf_anim_1_4[] = {
  0x4f, 0x40, 0x20, 0x00, 0x00, 0x00
};
// 'leaf_18-7', 6x8px
static const char PROGMEM leaf_anim_18_7[] = {
  0xb2, 0xb9, 0x9d, 0x8f, 0x96, 0xb6
};
// 'leaf_19-5', 6x8px
static const char PROGMEM leaf_anim_19_5[] = {
  0x00, 0x00, 0x00, 0x01, 0x01, 0x01
};
// 'leaf_19-4', 6x8px
static const char PROGMEM leaf_anim_19_4[] = {
  0x00, 0x00, 0x80, 0x40, 0xc0, 0x40
};
// 'leaf_20-2', 6x8px
static const char PROGMEM leaf_anim_20_2[] = {
  0x00, 0x00, 0x86, 0x0d, 0x16, 0xef
};
// 'leaf_3-1', 12x8px
static const char PROGMEM leaf_anim_3_1[] = {
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00
};
// 'leaf_0-5', 12x8px
static const char PROGMEM leaf_anim_0_5[] = {
  0xfe, 0x01, 0xf7, 0x08, 0x08, 0x18, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00
};
// 'leaf_17-6', 12x8px
static const char PROGMEM leaf_anim_17_6[] = {
  0x00, 0x00, 0x60, 0xd0, 0xe0, 0x80, 0x80, 0x40, 0xc0, 0x40, 0x80, 0x00
}; 
// 'leaf_19-3', 12x8px
static const char PROGMEM leaf_anim_19_3[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x2a, 0xff, 0xf8, 0x0c, 0x26, 0x73
};

// 'birds_top_*', 48x8px
static const char PROGMEM birds_top[IDLE_FRAMES_BIRDS][48] = {
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x85, 0x05, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x15, 0x25, 0x05, 0x05, 0x05, 0x25, 0x15, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x85, 0x05, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x85, 0x45, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x45, 0x85, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x15, 0x25, 0x15, 0x05, 0x05, 0x05, 0x05, 0x45, 0x85, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0xc5, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x85, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x4d, 0x85, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x25, 0x45, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x15, 0x25, 0x15, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x25, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x05, 0x0d},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x15, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
  {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x15, 0x0d, 0x15, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05}
};
// 'birds_bot_*', 24x8px
static const char PROGMEM birds_bot[IDLE_FRAMES_BIRDS][24] = {
  {0x02, 0x02, 0x62, 0xdc, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x08, 0x10, 0x08, 0x40, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x04, 0x40, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x20, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x80, 0x20, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x10, 0x08, 0x00, 0x00, 0x20, 0x40, 0x20, 0x00, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x02, 0x04, 0x02, 0x00, 0x10, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x00, 0x20, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
  {0x02, 0x02, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04}
};

// 'bg_frame', 128x64px
static const char PROGMEM bg_frame[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xf9, 0x0d, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0d, 0xf9, 0x03, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x8a, 0x0c, 0x10, 0xef, 0x80, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x14, 0x28, 0xf3, 0xf8, 0x0c, 0x26, 0x73, 0xf1, 0xee, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0xf0, 0xe9, 0xc3, 0x87, 0x0e, 0x3c, 0x80, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0xf0, 0xf8, 0xfd, 0x0e, 0x0e, 0x1b, 0x39, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xa0, 0xc0, 0x00, 0xc0, 0xa0, 0xd0, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xc9, 0x83, 0xc7, 0x7e, 0x38, 0x80, 0x7f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x9f, 0xb0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xae, 0xbb, 0xb1, 0xb1, 0xb2, 0x98, 0x9c, 0x0e, 
  0xc6, 0x86, 0xc6, 0xe6, 0x6e, 0x1c, 0x38, 0xe4, 0xce, 0x87, 0xa3, 0xa1, 0xb2, 0xb8, 0x9c, 0x8e, 
  0x96, 0xb6, 0x66, 0x66, 0xac, 0x9c, 0xb2, 0x41, 0x3c, 0x42, 0x81, 0x81, 0x85, 0x8d, 0x42, 0x3c
}; 

// 'moon', 36x36px
static const char PROGMEM moon[4][36] = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0xd0, 0xe8, 0x7c, 0xdc, 0xfe, 0x76, 0x7b, 0xfb,
  0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x67, 0xc7, 0xce, 0xfc, 0xdc, 0xd8, 0xf0, 0xf0,
  0xe0, 0xc0, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x08, 0x08, 0x0a, 0x17, 0x4d, 0xdf, 0xfe, 0xfe, 0xff,
  0xc7, 0xf3, 0x38, 0x38, 0xb8, 0xc3, 0x7f, 0x7f, 0x7f, 0xf8, 0xff, 0xf8, 0xf8, 0xf3, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf8},
  {0x00, 0x00, 0x00, 0x00, 0x20, 0x47, 0x0c, 0x08, 0x08, 0x20, 0x20, 0xf0, 0xff, 0x3f, 0x97, 0x17,
  0x0b, 0x0b, 0x0b, 0x17, 0x2f, 0x9f, 0x9c, 0x9c, 0xfc, 0xf3, 0x73, 0xff, 0xe7, 0x67, 0x1f, 0x1f,
  0xcf, 0xeb, 0x3f, 0x0f},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x03, 0x00, 0x03, 0x03,
  0x46, 0x04, 0x44, 0x00, 0x00, 0x00, 0x03, 0x03, 0x13, 0x0b, 0x0b, 0x03, 0x00, 0x00, 0x04, 0x04,
  0x03, 0x00, 0x00, 0x00}
};

// 'i', 18x24px
static const char PROGMEM i_icon[3][18] = {
  {0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x3e, 0xc1, 0x3e, 0x7f, 0xff, 0xff, 0x90, 0x90, 0xff, 0x7f, 0x3e, 0xc1, 0x3e, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00}
};

// 'i_selected', 18x24px
static const char PROGMEM i_icon_selected[3][18] = {
  {0x00, 0xf0, 0x18, 0x08, 0x88, 0x48, 0x48, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x48, 0x48, 0x88, 0x08, 0x18, 0xf0},
  {0x00, 0xff, 0x00, 0x3e, 0xc1, 0x3e, 0x7f, 0xff, 0xff, 0x90, 0x90, 0xff, 0x7f, 0x3e, 0xc1, 0x3e, 0x00, 0xff},
  {0x00, 0x03, 0x06, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04, 0x06, 0x03}
};
        
// 'gear', 18x8px
static const char PROGMEM gear_icon[3][18] = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0xc0, 0x40, 0xc0, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x38, 0xab, 0xfe, 0xff, 0xc7, 0x93, 0xab, 0x93, 0xc7, 0xff, 0xfe, 0xab, 0x38, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x01, 0x07, 0x05, 0x07, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00}
};

// 'gear_selected', 18x24px
static const char PROGMEM gear_icon_selected[3][18] = {
  {0x00, 0xe0, 0x30, 0x10, 0x10, 0x90, 0x90, 0x10, 0xd0, 0x50, 0xd0, 0x10, 0x90, 0x90, 0x10, 0x10, 0x30, 0xe0},
  {0x00, 0xff, 0x00, 0x38, 0xab, 0xfe, 0xff, 0xc7, 0x93, 0xab, 0x93, 0xc7, 0xff, 0xfe, 0xab, 0x38, 0x00, 0xff},
  {0x00, 0x07, 0x0c, 0x08, 0x09, 0x0a, 0x0b, 0x09, 0x0f, 0x0d, 0x0f, 0x09, 0x0b, 0x0a, 0x09, 0x08, 0x0c, 0x07}
};

#ifdef RGBLIGHT_ENABLE
// 'bouton_led', 48x8px
static const char PROGMEM bouton_led[2][48] = {
  {0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x78, 0x08, 0x08, 0x70, 0x00, 0x00, 0x3c, 0x42, 0x99, 0xad,
  0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0x99, 0x81, 0x81, 0xa9, 0x81, 0xa9, 0x81, 0xa9, 0x81, 0x42,
  0x3c, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x7c, 0x0a, 0x02, 0x7c, 0x0a, 0x02, 0x00, 0x00},
  {0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x78, 0x08, 0x08, 0x70, 0x00, 0x00, 0x3c, 0x42, 0x81, 0xa9,
  0x81, 0xa9, 0x81, 0xa9, 0x81, 0x81, 0x99, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0x99, 0x42,
  0x3c, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x7c, 0x0a, 0x02, 0x7c, 0x0a, 0x02, 0x00, 0x00}
};
#endif //RGBLIGHT_ENABLE

// clang-format on

oled_rotation_t oled_init_user(oled_rotation_t rotation) { return OLED_ROTATION_180; }

static void render_info(void) {
    // Slave
    // 'Background frame info', 128x64px
    oled_write_raw_P(frame_wide_info, sizeof(frame_wide_info));
}

static void render_anim_top_left(void) {
    // animation des feuilles
    // chaotic function the variable will underflow and overflow but it's fine
    //current_idle_frame_chaos_left = 5 * current_idle_frame_chaos_left * (1 - current_idle_frame_chaos_left);
    if (current_idle_frame_rand % 2 == 1) {
        // feuille 1 char
        oled_set_cursor(4, 0);
        oled_write_raw_P(leaf_anim_4_0, sizeof(leaf_anim_4_0));
        //oled_set_cursor(7, 0);
        //oled_write_raw_P(leaf_anim_7_0, sizeof(leaf_anim_7_0));
        oled_set_cursor(1, 4);
        oled_write_raw_P(leaf_anim_1_4, sizeof(leaf_anim_1_4));

        // feuille 2 chars
        oled_set_cursor(3, 1);
        oled_write_raw_P(leaf_anim_3_1, sizeof(leaf_anim_3_1));
        oled_set_cursor(0, 5);
        oled_write_raw_P(leaf_anim_0_5, sizeof(leaf_anim_0_5));
    }

    if (get_current_wpm() > IDLE_SPEED) {
        // animation des boules en coin
        current_frame = (current_frame + 1) % TAP_FRAMES;
        if (current_frame != (TAP_FRAMES-1)) {
            oled_set_cursor(0, 0);
            oled_write_raw_P(boule_anim[current_frame], sizeof(boule_anim[0]));
        }
    }
 
    // birds
    if (get_current_wpm() > TAP_SPEED) {
        // keep incrementing the counter
        current_idle_frame_birds = (current_idle_frame_birds + 1) % IDLE_FRAMES_BIRDS;
        oled_set_cursor(11, 0);
        oled_write_raw_P(birds_top[current_idle_frame_birds], sizeof(birds_top[0]));
        oled_set_cursor(9, 1);
        oled_write_raw_P(birds_bot[current_idle_frame_birds], sizeof(birds_bot[0]));
        // start or keep looping
        looping_animation = true;
    } else {
        if (looping_animation) {
            current_idle_frame_birds = (current_idle_frame_birds + 1) % IDLE_FRAMES_BIRDS;
            if (current_idle_frame_birds == 0) {
                // we are done looping 
                looping_animation = false;
            } else {
                // display the remaining frames 
                oled_set_cursor(11, 0);
                oled_write_raw_P(birds_top[current_idle_frame_birds], sizeof(birds_top[0]));
                oled_set_cursor(9, 1);
                oled_write_raw_P(birds_bot[current_idle_frame_birds], sizeof(birds_bot[0]));
            }
        }
        // nothing to display if not above TAP_SPEEP on not currently looping
    }
}

static void render_anim_bottom_right(void) {
    // animation des feuilles aléatoire
    if (current_idle_frame_rand % 2 == 1) {
        // feuille size 1 char
        oled_set_cursor(18, 7);
        oled_write_raw_P(leaf_anim_18_7, sizeof(leaf_anim_18_7));
        oled_set_cursor(19, 5);
        oled_write_raw_P(leaf_anim_19_5, sizeof(leaf_anim_19_5));
        oled_set_cursor(19, 4);
        oled_write_raw_P(leaf_anim_19_4, sizeof(leaf_anim_19_4));
        oled_set_cursor(20, 2);
        oled_write_raw_P(leaf_anim_20_2, sizeof(leaf_anim_20_2));

        // feuille size 2 chars
        oled_set_cursor(17, 6);
        oled_write_raw_P(leaf_anim_17_6, sizeof(leaf_anim_17_6));
        oled_set_cursor(19, 3);
        oled_write_raw_P(leaf_anim_19_3, sizeof(leaf_anim_19_3));
    }

    // animation boule en bas droite
    if (get_current_wpm() > IDLE_SPEED) {
        current_frame = (current_frame + 1) % TAP_FRAMES;
        if (current_frame != (TAP_FRAMES-1)) {
            // (TAP_FRAMES - 1) because the last frame is included in the background!
            oled_set_cursor(20, 7);
            oled_write_raw_P(boule_anim[current_frame], sizeof(boule_anim[0]));
        }
    }
}

static void render_state(void) { 
    // Master only

    // 'Background frame', 128x64px
    oled_write_raw_P(bg_frame, sizeof(bg_frame));
    
    // onglet et background
    switch (get_highest_layer(layer_state|default_layer_state)) {
        case _BASE:
        case _MOVE:
        case _NUM:
            // 'i' icon selected, 18x24px
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 1+i);
                oled_write_raw_P(i_icon_selected[i], sizeof(i_icon_selected[i]));
            }

            // 'gear' icon, 18x24px
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 4+i);
                oled_write_raw_P(gear_icon[i], sizeof(gear_icon[i]));
            }
                            
            // Host Keyboard Layer Status
            oled_set_cursor(6, 1);
            oled_write_P(PSTR("Layer: "), false);
            switch (get_highest_layer(layer_state)) {
                case _BASE:
                    oled_write_P(PSTR("BASE"), false);
                    break;
                case _MOVE:
                    oled_write_P(PSTR("MOVE"), false);
                    break;
                case _NUM:
                    oled_write_P(PSTR("NUMBERS"), false);
                    break;
                case _SETTINGS:
                    oled_write_P(PSTR("SETTINGS"), false);
                    break;
                default:
                    oled_write_P(PSTR("Undefined"), false);
            }
            
            // Write host Keyboard LED Status to OLEDs
            led_t led_usb_state = host_keyboard_led_state();
            oled_set_cursor(6, 2);
            oled_write_P(led_usb_state.num_lock    ? PSTR("NUMLCK on") : PSTR("NUMLCK off"), false);
            oled_set_cursor(6, 3);
            oled_write_P(led_usb_state.caps_lock   ? PSTR("CAPLCK on") : PSTR("CAPLCK off"), false);
            oled_set_cursor(6, 4);
            oled_write_P(led_usb_state.scroll_lock ? PSTR("SCRLCK on") : PSTR("SCRLCK off"), false);
            
            // Words Per Minute
            oled_set_cursor(6, 5);
            oled_write_P(PSTR("WPM"), false);
            wpm_val = get_current_wpm();
            itoa(wpm_val, str_wpm_val, 10);
            oled_set_cursor(13, 5);
            oled_write(str_wpm_val, false);
            break;

        case _SETTINGS:
            // 'moon' pixel art, 36x36px
            for (int i = 0; i < 4; i++) {
                oled_set_cursor(13, 1+i);
                oled_write_raw_P(moon[i], sizeof(moon[0]));
            }

            #ifdef RGBLIGHT_ENABLE
            oled_set_cursor(4, 1);
            oled_write_P(PSTR("LEDs"), false);
            
            // 'bouton_led', 48x8px
            if (rgblight_is_enabled()) {
                oled_set_cursor(5, 2);
                oled_write_raw_P(bouton_led[0], sizeof(bouton_led[0]));
            } else {
                oled_set_cursor(5, 2);
                oled_write_raw_P(bouton_led[1], sizeof(bouton_led[0]));
            }
            
            // RGB animation mode 
            oled_set_cursor(4, 4);
            oled_write_P(PSTR("Mode"), false);
            rgb_mode = rgblight_get_mode();
            itoa(rgb_mode, str_rgb_mode, 10);
            oled_set_cursor(9, 4);
            oled_write(str_rgb_mode, false);
            
            // Color aka 'rgb_hue'
            oled_set_cursor(4, 5);
            oled_write_P(PSTR("Hue"), false);
            rgb_hue = rgblight_get_hue();
            itoa(rgb_hue, str_rgb_hue, 10);
            oled_set_cursor(9, 5);
            oled_write(str_rgb_hue, false);

            // brightness aka 'rgb_val'
            oled_set_cursor(4, 6);
            oled_write_P(PSTR("Brghtnss"), false);
            rgb_val = rgblight_get_val();
            itoa(rgb_val, str_rgb_val, 10);
            oled_set_cursor(13, 6);
            oled_write(str_rgb_val, false);
            #endif // RGBLIGHT_ENABLE

            // 'i' icon
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 1+i);
                oled_write_raw_P(i_icon[i], sizeof(i_icon[i]));
            }
            
            // 'gear' icon selected, 18x24px
            for (int i = 0; i < 3; i++) {
                oled_set_cursor(0, 4+i);
                oled_write_raw_P(gear_icon_selected[i], sizeof(gear_icon_selected[i]));
            }
            break;

        default:
            break;
    }
}

void render_sides(void) {
    if (!is_keyboard_master()) {
        render_info();
        render_anim_bottom_right();
        render_anim_top_left();
    } else {
        render_state();
        render_anim_bottom_right();
    }
}

#endif // BIRDS

bool oled_task_user(void) {
    if (sync_timer_elapsed32(anim_timer) > ANIM_FRAME_DURATION) {
        // it is time to render a frame
        anim_timer = sync_timer_read32();
        #ifdef BIRDS 
        current_idle_frame_rand = rand();
        #endif //BIRDS

        if (get_current_wpm() != 0) { 
            // if we start typing the screen wakes up
            oled_on();
            // and the sleep timer is reset
            anim_sleep = timer_read32();
            // each side are rendered separately
            render_sides();
        } else if (timer_elapsed32(anim_sleep) > OLED_TIMEOUT) {
            // ok but if we stop typing the screen goes to sleep after OLED_TIMEOUT
            oled_off();
        } else {
            // as long as the timeout is not reached we need to keep rendering the idle animation
            render_sides();
        }
    }
    return false;
}

#endif // OLED_ENABLE
